{"version":3,"sources":["file:///G:/cocos/%E6%9C%AB%E6%97%A5%E7%89%B9%E5%B7%A5%E9%98%9F/assets/scripts/game/compoment/sys/MonsterSystem.ts"],"names":["macro","Node","UITransform","_decorator","cocosUtil","utilTools","constants","designManager","mapModel","playerModel","BaseLayer","NodePoolUtil","Monster","ccclass","property","MonsterSystem","idMonsterLayerObj","monsterCreateArr","bossMonster","bossCreateInfo","monsterNum","showMonsterNum","onLoad","schedule","refreshMonsterShow","REPEAT_FOREVER","createMonsterLogic","onEnable","getSaveData","monsterData","arr","forAliveMonster","monster","info","push","loadSaveData","data","forArr","createMonster","id","createMonsterWithInfo","isBoss","warn","dt","destroyCount","showCount","hideCount","showNum","tmpArr","monsterNode","row","getRowById","tableName","distancePlayer","dataRadius","isData","active","destroyRadius","type","monsterTypes","common","getComponent","recycleSelf","setString","mapLayer","showNumNode","updateMapLevel","removeIdArr","mapLevelArr","mapLevel","maxNum","createCount","endTime","time","hasWarn","startTime","mapSystem","startWarning","timeCount","createTime","monsterId","isRecordAd","monsterAddFlag","i","indexOf","count","Math","ceil","length","shift","getMonsterLayerNameById","getMonsterLayerById","monsterLayer","addComponent","setPosition","parent","node","nodePoolUtil","init","monsterPrefabObj","prefab","worldPos","getNode","addComponentOnce","position","convertToNodeSpace","monsterNumNode","stopTimeCount","getMonsterNumByType","elite","waitTimeAsync","undefined","pos","player","getPosition","y","monsterUtil","moveStop","canFace","collider","enabled","scheduleOnce","tweenScaleIn","bossPosHintAnimationCtrl","playAnimation","hitArr","waitHit","batchHitMonster","bulletSystem","forVisibleMonsterBullet","bullet","showWallLayer","refreshBossHpLayer","num","monsterDead","boss","bossDead","monsterIds","boxMonster","popLayer","layers","BoxMonsterLayer","killMonsterFunc","hitInfo","dam","hp","hitWithDam","recycleMonsterNode","recycleNode","forVisibleMonster","cb","children","isInScreenVisible","updateLogic","update","move"],"mappings":"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","sourcesContent":["import { macro, Node, UITransform, Vec3, _decorator } from 'cc';\r\nimport { cocosUtil } from '../../../utils/cocosUtil';\r\nimport { utilTools } from '../../../utils/utilTools';\r\nimport { constants } from '../../data/constants';\r\nimport { designManager } from '../../manager/designManager';\r\nimport { mapModel } from '../../model/mapModel';\r\nimport { playerModel } from '../../model/playerModel';\r\nimport { BaseLayer } from '../base/BaseLayer';\r\nimport { NodePoolUtil } from '../base/NodePoolUtil';\r\nimport { Bullet } from '../item/bullet/Bullet';\r\nimport { Monster } from '../item/monsters/Monster';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('MonsterSystem')\r\nexport class MonsterSystem extends BaseLayer {\r\n\r\n    // 按照怪物id进行UI分层\r\n    idMonsterLayerObj: any = {};\r\n\r\n    monsterCreateArr: any = [];\r\n\r\n    bossMonster: Monster;\r\n    bossCreateInfo: any;\r\n\r\n    // 一共产生的怪物数量\r\n    monsterNum: number = 0;\r\n    // 当前在显示的怪物数量\r\n    showMonsterNum: number = 0;\r\n\r\n    onLoad() {\r\n        super.onLoad();\r\n\r\n        this.schedule(this.refreshMonsterShow, 0.5, macro.REPEAT_FOREVER);\r\n        this.schedule(this.createMonsterLogic, 0.1, macro.REPEAT_FOREVER);\r\n    }\r\n\r\n    onEnable() {\r\n        super.onEnable();\r\n\r\n    }\r\n\r\n    getSaveData() {\r\n        let monsterData: any = {};\r\n        monsterData.arr = [];\r\n        monsterData.bossCreateInfo = this.bossCreateInfo;\r\n\r\n        this.forAliveMonster((monster: Monster) => {\r\n            let info = monster.getSaveData();\r\n            monsterData.arr.push(info);\r\n        });\r\n\r\n        return monsterData;\r\n    }\r\n\r\n    loadSaveData(data: any) {\r\n        utilTools.forArr(data.arr, (info: any) => {\r\n            let monster = this.createMonster(info.id);\r\n            monster.loadSaveData(info);\r\n        });\r\n\r\n        this.bossCreateInfo = data.bossCreateInfo;\r\n        if (this.bossCreateInfo) {\r\n            this.createMonsterWithInfo(this.bossCreateInfo.id, this.bossCreateInfo.isBoss, this.bossCreateInfo.warn);\r\n        }\r\n    }\r\n\r\n    // 怪物显示优化\r\n    refreshMonsterShow(dt: number) {\r\n        let destroyCount = 1;\r\n        let showCount = 3;\r\n        let hideCount = 1;\r\n        let showNum = 0;\r\n        let tmpArr = [];\r\n        this.forAliveMonster((monster: Monster, monsterNode: Node) => {\r\n            let row = designManager.getRowById(constants.tableName.monster, monster.id);\r\n            if (monster.distancePlayer < mapModel.dataRadius || !row.isData) {\r\n                // 显示怪物\r\n                showNum++;\r\n                if (!monsterNode.active && showCount > 0) {\r\n                    monsterNode.active = true;\r\n                    showCount--;\r\n                }\r\n            } else if (monster.distancePlayer < mapModel.destroyRadius) {\r\n                // 隐藏怪物\r\n                if (monsterNode.active && hideCount > 0) {\r\n                    hideCount--;\r\n                    monsterNode.active = false;\r\n                }\r\n            } else {\r\n                if (row.type == constants.monsterTypes.common && destroyCount > 0) {\r\n                    // 销毁怪物\r\n                    destroyCount--;\r\n                    tmpArr.push(monsterNode);\r\n                }\r\n            }\r\n        });\r\n        utilTools.forArr(tmpArr, (monsterNode: Node) => {\r\n            monsterNode.getComponent(Monster).recycleSelf();\r\n        });\r\n        this.setString(mapModel.mapLayer.showNumNode, showNum);\r\n        this.showMonsterNum = showNum;\r\n    }\r\n\r\n    // 怪物生成逻辑\r\n    updateMapLevel(dt: number) {\r\n        let removeIdArr = [];\r\n        utilTools.forArr(mapModel.mapLevelArr, (mapLevel: any) => {\r\n            // test\r\n            // mapLevel.row.maxNum = 100;\r\n            // mapLevel.row.createTime = 0.1;\r\n\r\n            if (mapLevel.row.maxNum > 0 && mapLevel.createCount >= mapLevel.row.maxNum) {\r\n                removeIdArr.push(mapLevel.id);\r\n                return;\r\n            }\r\n            if (mapLevel.row.endTime > 0 && mapModel.time > mapLevel.row.endTime + 0.5) {\r\n                removeIdArr.push(mapLevel.id);\r\n                return;\r\n            }\r\n\r\n            // 预警动画\r\n            if (mapLevel.row.warn && !mapLevel.hasWarn && mapModel.time >= mapLevel.row.startTime && !mapLevel.row.isBoss) {\r\n                mapLevel.hasWarn = true;\r\n                mapModel.mapSystem.startWarning(mapLevel.row.warn);\r\n            }\r\n\r\n            // 还没到达生成时间点\r\n            if (mapModel.time < mapLevel.row.startTime) {\r\n                return;\r\n            }\r\n\r\n            mapLevel.timeCount += dt;\r\n            if (mapLevel.timeCount >= mapLevel.row.createTime || mapLevel.createCount == 0) {\r\n                // 生成怪物\r\n                mapLevel.timeCount -= mapLevel.row.createTime;\r\n                mapLevel.createCount++;\r\n                if (mapLevel.row.isBoss) {\r\n                    this.createMonsterWithInfo(mapLevel.row.monsterId, mapLevel.row.isBoss, mapLevel.row.warn);\r\n                    return true;\r\n                }\r\n                this.monsterCreateArr.push({ monsterId: mapLevel.row.monsterId, isBoss: mapLevel.row.isBoss });\r\n                if (playerModel.isRecordAd && mapModel.mapLayer.monsterAddFlag > 0) {\r\n                    for (let i = 0; i < mapModel.mapLayer.monsterAddFlag; i++) {\r\n                        this.monsterCreateArr.push({ monsterId: mapLevel.row.monsterId, isBoss: mapLevel.row.isBoss });\r\n                    }\r\n                }\r\n            }\r\n        });\r\n        let tmpArr = [];\r\n        utilTools.forArr(mapModel.mapLevelArr, (mapLevel: any) => {\r\n            if (removeIdArr.indexOf(mapLevel.id) != -1) {\r\n                return;\r\n            }\r\n            tmpArr.push(mapLevel);\r\n        });\r\n        mapModel.mapLevelArr = tmpArr;\r\n    }\r\n\r\n    createMonsterLogic(dt: number) {\r\n        if (!playerModel.isRecordAd && this.showMonsterNum >= 200) {\r\n            return;\r\n        }\r\n        let count = Math.ceil(this.monsterCreateArr.length / 10);\r\n\r\n        for (let i = 0; i < count; i++) {\r\n            let info = this.monsterCreateArr.shift();\r\n            if (!info) {\r\n                return;\r\n            }\r\n            this.createMonsterWithInfo(info.monsterId, info.isBoss);\r\n        }\r\n    }\r\n\r\n    getMonsterLayerNameById(id: number) {\r\n        return \"monsterLayer\" + id;\r\n    }\r\n\r\n    getMonsterLayerById(monsterId: number) {\r\n        let monsterLayer = this.idMonsterLayerObj[monsterId];\r\n        if (!monsterLayer) {\r\n            monsterLayer = new Node(this.getMonsterLayerNameById(monsterId));\r\n            monsterLayer.addComponent(UITransform);\r\n            monsterLayer.setPosition(0, 0);\r\n            monsterLayer.parent = this.node;\r\n            this.idMonsterLayerObj[monsterId] = monsterLayer;\r\n\r\n            let row = designManager.getRowById(constants.tableName.monster, monsterId);\r\n            let nodePoolUtil = monsterLayer.addComponent(NodePoolUtil);\r\n            nodePoolUtil.init(mapModel.monsterPrefabObj[row.prefab]);\r\n        }\r\n        return monsterLayer;\r\n    }\r\n\r\n    createMonster(monsterId: number, worldPos?: Vec3) {\r\n        let nodePoolUtil: NodePoolUtil = this.getMonsterLayerById(monsterId).getComponent(NodePoolUtil);\r\n        let monsterNode = nodePoolUtil.getNode();\r\n        let monster: Monster = cocosUtil.addComponentOnce(monsterNode, Monster);\r\n        monster.init(monsterId);\r\n        if (worldPos) {\r\n            monster.node.position = cocosUtil.convertToNodeSpace(monster.node, worldPos);\r\n        }\r\n\r\n        this.monsterNum++;\r\n        this.setString(mapModel.mapLayer.monsterNumNode, this.monsterNum);\r\n\r\n        return monster;\r\n    }\r\n\r\n    async createMonsterWithInfo(monsterId: number, isBoss: number, warn?: string) {\r\n        // // test\r\n        // if (isBoss) {\r\n        //     monsterId = 23;\r\n        // }\r\n\r\n        if (isBoss) {\r\n            // 停止计时\r\n            mapModel.mapSystem.stopTimeCount = true;\r\n            // 移除所有怪物计划\r\n            mapModel.mapLevelArr = [];\r\n            this.monsterCreateArr = [];\r\n\r\n            this.bossCreateInfo = {\r\n                id: monsterId,\r\n                isBoss: isBoss,\r\n                warn: warn\r\n            };\r\n            if (this.getMonsterNumByType(constants.monsterTypes.elite) > 0) {\r\n                // 如果有精英怪，就要等精英怪打死后才能出现\r\n                return;\r\n            }\r\n\r\n            mapModel.mapSystem.startWarning(warn);\r\n            await cocosUtil.waitTimeAsync(this, 2);\r\n            this.bossCreateInfo = undefined;\r\n        }\r\n\r\n        let monster = this.createMonster(monsterId);\r\n\r\n        if (isBoss) {\r\n            monster.isBoss = isBoss;\r\n\r\n            // BOSS产生位置和预警\r\n            let pos = mapModel.player.node.getPosition();\r\n            pos.y += 400;\r\n            monster.node.position = pos;\r\n            monster.monsterUtil.moveStop = true;\r\n            monster.canFace = false;\r\n            monster.node.parent.active = false;\r\n            monster.collider.enabled = false;\r\n            this.scheduleOnce(() => {\r\n                monster.node.parent.active = true;\r\n                cocosUtil.tweenScaleIn(monster.node, 0.5, () => {\r\n                    monster.monsterUtil.moveStop = false;\r\n                    monster.canFace = true;\r\n                    monster.collider.enabled = true;\r\n                });\r\n\r\n                // let time = 0.5;\r\n                // monster.node.setScale(0, 0, 1);\r\n                // tween(monster.node).to(time, {\r\n                //     scale: v3(1.2, 1.2, 1)\r\n                // }).to(time / 2, {\r\n                //     scale: v3(1, 1, 1)\r\n                // }).call(() => {\r\n                //     monster.monsterUtil.moveStop = false;\r\n                //     monster.canFace = true;\r\n                // }).start();\r\n\r\n            }, 0.8);\r\n            mapModel.mapSystem.bossPosHintAnimationCtrl.node.active = true;\r\n            mapModel.mapSystem.bossPosHintAnimationCtrl.node.position = pos;\r\n            mapModel.mapSystem.bossPosHintAnimationCtrl.playAnimation(\"aa\", false, () => {\r\n                mapModel.mapSystem.bossPosHintAnimationCtrl.node.active = false;\r\n            });\r\n\r\n            // 销毁所有普通怪物\r\n            let hitArr = [];\r\n            this.forAliveMonster((monster: Monster) => {\r\n                if (monster.row.type != constants.monsterTypes.common) {\r\n                    return;\r\n                }\r\n                monster.waitHit = true;\r\n                let info: any = {};\r\n                info.monster = monster;\r\n                hitArr.push(info);\r\n            });\r\n            this.batchHitMonster(hitArr);\r\n\r\n            // 怪物子弹全部消失\r\n            mapModel.bulletSystem.forVisibleMonsterBullet((bullet: Bullet) => {\r\n                bullet.recycleSelf();\r\n            });\r\n\r\n            // 显示围栏\r\n            mapModel.mapSystem.showWallLayer();\r\n\r\n            // 缓存boss对象\r\n            this.bossMonster = monster;\r\n\r\n            mapModel.mapLayer.refreshBossHpLayer();\r\n        }\r\n\r\n        return monster;\r\n    }\r\n\r\n    getMonsterNumByType(type: number = 0) {\r\n        let num = 0;\r\n        this.forAliveMonster((monster: Monster) => {\r\n            if (!type) {\r\n                num++;\r\n                return;\r\n            }\r\n            if (monster.row.type == type) {\r\n                num++;\r\n            }\r\n        });\r\n\r\n        return num;\r\n    }\r\n\r\n    monsterDead(id: number) {\r\n        let row = designManager.getRowById(constants.tableName.monster, id);\r\n        if (row.type == constants.monsterTypes.boss) {\r\n            mapModel.mapSystem.bossDead();\r\n        }\r\n        if (id == constants.monsterIds.boxMonster) {\r\n            // 宝箱怪阵亡弹窗\r\n            mapModel.mapLayer.popLayer(constants.layers.BoxMonsterLayer);\r\n        }\r\n\r\n        if (row.type == constants.monsterTypes.elite && this.bossCreateInfo) {\r\n            this.createMonsterWithInfo(this.bossCreateInfo.id, this.bossCreateInfo.isBoss, this.bossCreateInfo.warn);\r\n        }\r\n    }\r\n\r\n    // 分批怪物受击\r\n    batchHitMonster(hitArr: any, num: number = 2) {\r\n        let killMonsterFunc = () => {\r\n            for (let i = 0; i < num; i++) {\r\n                let hitInfo = hitArr.shift();\r\n                if (!hitInfo) {\r\n                    return;\r\n                }\r\n                let monster: Monster = hitInfo.monster;\r\n                if (monster.waitHit) {\r\n                    let dam = monster.hp;\r\n                    if (hitInfo.dam) {\r\n                        dam = hitInfo.dam;\r\n                    }\r\n                    monster.hitWithDam(dam);\r\n                    monster.waitHit = false;\r\n                }\r\n            }\r\n            this.scheduleOnce(() => {\r\n                killMonsterFunc();\r\n            });\r\n        };\r\n        killMonsterFunc();\r\n    }\r\n\r\n    recycleMonsterNode(monsterNode: Node) {\r\n        let monster = monsterNode.getComponent(Monster);\r\n        monster.hp = 0;\r\n        let monsterId = monster.id;\r\n        let nodePoolUtil = this.getMonsterLayerById(monsterId).getComponent(NodePoolUtil);\r\n        nodePoolUtil.recycleNode(monsterNode);\r\n    }\r\n\r\n    // 遍历屏幕范围内的存活怪物\r\n    forVisibleMonster(cb: (monster: Monster) => void) {\r\n        utilTools.forArr(this.node.children, (monsterLayer: Node) => {\r\n            utilTools.forArr(monsterLayer.children, (monsterNode: Node) => {\r\n                if (!monsterNode.active) {\r\n                    return;\r\n                }\r\n                if (!mapModel.isInScreenVisible(monsterNode)) {\r\n                    return;\r\n                }\r\n                let monster = monsterNode.getComponent(Monster);\r\n                if (monster.hp <= 0) {\r\n                    return;\r\n                }\r\n                cb(monster);\r\n            });\r\n        });\r\n    }\r\n\r\n    // 遍历所有的存活怪物\r\n    forAliveMonster(cb: (monster: Monster, monsterNode: Node) => void) {\r\n        utilTools.forArr(this.node.children, (monsterLayer: Node) => {\r\n            utilTools.forArr(monsterLayer.children, (monsterNode: Node) => {\r\n                let monster = monsterNode.getComponent(Monster);\r\n                if (monster.hp <= 0) {\r\n                    return;\r\n                }\r\n                cb(monster, monsterNode);\r\n            });\r\n        });\r\n    }\r\n\r\n    updateLogic(dt: number) {\r\n        this.updateMapLevel(dt);\r\n        this.forAliveMonster((monster: Monster) => {\r\n            monster.updateLogic(dt);\r\n        });\r\n    }\r\n\r\n    update(dt: number) {\r\n        // 怪物移动\r\n        this.forAliveMonster((monster: Monster) => {\r\n            monster.move(dt);\r\n        });\r\n    }\r\n}\r\n\r\n"]}