{"version":3,"sources":["file:///G:/cocos/%E6%9C%AB%E6%97%A5%E7%89%B9%E5%B7%A5%E9%98%9F/assets/scripts/game/manager/layerManager.ts"],"names":["LayerManager","find","Prefab","myLog","cocosUtil","constants","resManager","constructor","layer1","layerHint","openingLayerMap","Map","openedLayerMap","layerNameIdArrMap","layerId","instance","_instance","loadCommonLayers","onProgress","onComplete","arr","layers","HomeLayer","loadAssetByPathArr","bundles","layer","prefabArr","prefab","addRef","getPopLayerParentNode","init","createNotice","content","noticeLayer","NoticeLayer","getComponent","addLayerNameId","name","id","get","set","push","removeLayerNameId","length","index","indexOf","splice","openSingleLayer","layerName","obj","cb","openSuccessCb","idArr","openLayer","layerData","layerCb","onLoad","onEnable","layerParams","bundleName","layerPath","loadAsset","err","e","message","node","instantiate","com","addComponent","loadAssetConfigArr","preLoadAssetConfigArr","delete","parent","i","closeLayer","destroy","isShowingLayer","layerManager"],"mappings":"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","sourcesContent":["import { find, Node, Prefab } from \"cc\";\r\nimport { myLog } from \"../../common/myLog\";\r\nimport { cocosUtil } from \"../../utils/cocosUtil\";\r\nimport { BaseLayer } from \"../compoment/base/BaseLayer\";\r\nimport { constants } from \"../data/constants\";\r\nimport { resManager } from \"./resManager\";\r\n\r\n\r\nclass LayerManager {\r\n\r\n    private static _instance: LayerManager;\r\n    private constructor() { }\r\n    public static get instance(): LayerManager {\r\n        if (!this._instance) {\r\n            this._instance = new LayerManager();\r\n        }\r\n        return this._instance;\r\n    }\r\n\r\n    public layer1: Node;\r\n    private layerHint: Node;\r\n\r\n    // 正在打开中的弹窗\r\n    private openingLayerMap: Map<number, any> = new Map();\r\n    // 已经打开的弹窗\r\n    private openedLayerMap: Map<number, BaseLayer> = new Map();\r\n    // 弹窗名称->弹窗id数组\r\n    private layerNameIdArrMap: Map<string, number[]> = new Map();\r\n\r\n    private layerId: number = 0;\r\n\r\n    loadCommonLayers(onProgress?: Function, onComplete?: Function) {\r\n        let arr = [\r\n            constants.layers.HomeLayer,\r\n        ];\r\n        resManager.loadAssetByPathArr(constants.bundles.layer, arr, Prefab, onProgress, (prefabArr: any) => {\r\n            for (let prefab of prefabArr) {\r\n                prefab.addRef();\r\n            }\r\n            if (onComplete) {\r\n                onComplete(prefabArr);\r\n            }\r\n        });\r\n    }\r\n\r\n    getPopLayerParentNode(): Node {\r\n        return this.layer1;\r\n    }\r\n\r\n    init(layer1: Node, layerHint: Node) {\r\n        this.layer1 = layer1;\r\n        this.layerHint = layerHint;\r\n\r\n        this.openingLayerMap = new Map();\r\n        this.openedLayerMap = new Map();\r\n        this.layerNameIdArrMap = new Map();\r\n        this.layerId = 0;\r\n\r\n    }\r\n\r\n    createNotice(content: any) {\r\n        // 显示一条提示信息\r\n        let noticeLayer = find(constants.layers.NoticeLayer, this.layerHint);\r\n        if (noticeLayer) {\r\n            noticeLayer.getComponent(constants.layers.NoticeLayer)[\"createNotice\"](content);\r\n        }\r\n    }\r\n\r\n    addLayerNameId(name: string, id: number) {\r\n        let arr = this.layerNameIdArrMap.get(name);\r\n        if (!arr) {\r\n            arr = [];\r\n            this.layerNameIdArrMap.set(name, arr);\r\n        }\r\n        arr.push(id);\r\n    }\r\n\r\n    removeLayerNameId(name: string, id: number) {\r\n        let arr = this.layerNameIdArrMap.get(name);\r\n        if (arr && arr.length > 0) {\r\n            let index = arr.indexOf(id);\r\n            if (index != -1) {\r\n                arr.splice(index, 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    openSingleLayer(layerName: string, obj?: any, cb?: Function, openSuccessCb?: Function) {\r\n        if (!obj) {\r\n            obj = {};\r\n        }\r\n        let idArr = this.layerNameIdArrMap.get(layerName);\r\n        if (!idArr || idArr.length <= 0) {\r\n            this.openLayer(layerName, obj, cb, openSuccessCb);\r\n            return;\r\n        }\r\n\r\n        let id = idArr[0];\r\n        let layer = this.openedLayerMap.get(id);\r\n        if (layer) {\r\n            // 已显示，刷新数据\r\n            layer.layerData = obj;\r\n            layer.layerCb = cb;\r\n\r\n            layer.onLoad();\r\n            layer.onEnable();\r\n\r\n            if (openSuccessCb) {\r\n                openSuccessCb(layer);\r\n            }\r\n            return;\r\n        }\r\n\r\n        let layerParams = this.openingLayerMap.get(id);\r\n        if (layerParams) {\r\n            // 正准备显示，更新数据\r\n            layerParams.layerName = layerName;\r\n            layerParams.obj = obj;\r\n            layerParams.cb = cb;\r\n            layerParams.openSuccessCb = openSuccessCb;\r\n        }\r\n    }\r\n\r\n    openLayer(layerName: string, obj?: any, cb?: Function, openSuccessCb?: Function) {\r\n        if (!obj) {\r\n            obj = {};\r\n        }\r\n\r\n        this.layerId++;\r\n        let layerId = this.layerId;\r\n\r\n        let layerParams: any = {};\r\n        layerParams.layerName = layerName;\r\n        layerParams.obj = obj;\r\n        layerParams.cb = cb;\r\n        layerParams.openSuccessCb = openSuccessCb;\r\n        this.openingLayerMap.set(layerId, layerParams);\r\n\r\n        this.addLayerNameId(layerName, layerId);\r\n\r\n        let bundleName = constants.bundles.layer;\r\n        let layerPath = layerName;\r\n        resManager.loadAsset(bundleName, layerPath, Prefab, null, (err, prefab) => {\r\n            if (err) {\r\n                myLog.e(\"LayerManager.openLayer error:\" + err.message, layerName, err);\r\n                return;\r\n            }\r\n            layerParams = this.openingLayerMap.get(layerId);\r\n            if (!layerParams) {\r\n                // 在打开之前，就已经被关闭了\r\n                return;\r\n            }\r\n\r\n            let node = cocosUtil.instantiate(prefab);\r\n            let com = node.getComponent(layerName) || node.addComponent(layerName);\r\n\r\n            // 加载每个layer特定需要的资源\r\n            resManager.loadAssetConfigArr(com.preLoadAssetConfigArr, false, null, () => {\r\n                com.layerData = layerParams.obj;\r\n                com.layerCb = layerParams.cb;\r\n                com.layerName = layerParams.layerName;\r\n                com.layerId = layerId;\r\n\r\n                this.openingLayerMap.delete(layerId);\r\n                this.openedLayerMap.set(layerId, com);\r\n\r\n                // 添加到节点上后，会马上触发onLoad和onEnable回调，而start方法是在首次执行update之前被调用\r\n                node.parent = this.layer1;\r\n\r\n                myLog.i(\"openLayer \" + layerName, obj);\r\n\r\n                if (layerParams.openSuccessCb) {\r\n                    layerParams.openSuccessCb(com, prefab);\r\n                }\r\n            });\r\n\r\n        });\r\n    }\r\n\r\n    closeLayer(layerId: number | string) {\r\n        if (typeof (layerId) == \"string\") {\r\n            let idArr = this.layerNameIdArrMap.get(layerId);\r\n            if (!idArr || idArr.length <= 0) {\r\n                return;\r\n            }\r\n            layerId = idArr[idArr.length - 1];\r\n        }\r\n\r\n        let layer = this.openedLayerMap.get(layerId);\r\n        if (layer) {\r\n            layer.node.destroy();\r\n            this.openedLayerMap.delete(layerId);\r\n            this.removeLayerNameId(layer.layerName, layerId);\r\n        }\r\n\r\n        let layerParams = this.openingLayerMap.get(layerId);\r\n        if (layerParams) {\r\n            this.openingLayerMap.delete(layerId);\r\n            this.removeLayerNameId(layerParams.layerName, layerId);\r\n        }\r\n    }\r\n\r\n    isShowingLayer(layerName: string) {\r\n        let idArr = this.layerNameIdArrMap.get(layerName);\r\n        if (!idArr || idArr.length <= 0) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n}\r\n\r\nexport const layerManager = LayerManager.instance;\r\n\r\n"]}