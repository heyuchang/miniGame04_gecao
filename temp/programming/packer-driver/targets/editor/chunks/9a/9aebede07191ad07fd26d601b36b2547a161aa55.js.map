{"version":3,"sources":["file:///G:/cocos/%E6%9C%AB%E6%97%A5%E7%89%B9%E5%B7%A5%E9%98%9F/assets/scripts/game/engine/BoxColliderUtil.ts"],"names":["BoxCollider2D","Component","Enum","Rect","Size","Vec2","_decorator","EDITOR","physicsGroup","ccclass","property","executeInEditMode","BoxColliderUtil","type","worldPoints","worldAabb","contactColliderObj","contactBeginCb","contactEndCb","offset","_offset","v","size","_size","onDisable","i","collider","contactEnd","getContactKey","uuid","updateCollider","aabb","x","width","y","height","wp0","wp1","wp2","wp3","transformMat4ToPoints","node","worldMatrix","minX","Math","min","maxX","max","minY","maxY","setContactBegin","cb","setContactEnd","contactBegin","key1","key2","collider1","undefined","collider2","update","cc","GAME_VIEW","isSync","boxCollider","colliderArr","getComponents","length","tag","DEFAULT"],"mappings":"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","sourcesContent":["import { BoxCollider2D, Component, Enum, Rect, Size, Vec2, _decorator } from 'cc';\r\nimport { EDITOR } from 'cc/env';\r\nimport { physicsGroup } from '../other/physicsGroup';\r\nconst { ccclass, property, executeInEditMode } = _decorator;\r\n\r\n@ccclass('BoxColliderUtil')\r\n@executeInEditMode(true)\r\nexport class BoxColliderUtil extends Component {\r\n\r\n    @property\r\n    protected _offset = new Vec2();\r\n    @property\r\n    get offset() {\r\n        return this._offset;\r\n    }\r\n    set offset(v) {\r\n        this._offset = v;\r\n    }\r\n\r\n    @property\r\n    private _size = new Size(1, 1);\r\n    @property\r\n    get size() {\r\n        return this._size;\r\n    }\r\n    set size(v) {\r\n        this._size = v;\r\n    }\r\n\r\n    @property\r\n    tag = 0;\r\n\r\n    @property({ type: Enum(physicsGroup) })\r\n    group = physicsGroup.DEFAULT;\r\n\r\n    @property\r\n    isSync = false;\r\n\r\n    public worldPoints = [\r\n        new Vec2(),\r\n        new Vec2(),\r\n        new Vec2(),\r\n        new Vec2(),\r\n    ];\r\n\r\n    public worldAabb = new Rect();\r\n\r\n    contactColliderObj: any = {};\r\n    contactBeginCb: Function;\r\n    contactEndCb: Function;\r\n\r\n    onDisable() {\r\n        // 通知碰撞中的碰撞结束了\r\n        for (let i in this.contactColliderObj) {\r\n            let collider = this.contactColliderObj[i];\r\n            if (!collider) {\r\n                continue;\r\n            }\r\n            this.contactEnd(collider);\r\n        }\r\n    }\r\n\r\n    private getContactKey(collider: BoxColliderUtil) {\r\n        return this.uuid + \"_\" + collider.uuid;\r\n    }\r\n\r\n    updateCollider() {\r\n        const aabb = this.worldAabb;\r\n        aabb.x = this.offset.x - this.size.width * 0.5;\r\n        aabb.y = this.offset.y - this.size.height * 0.5;\r\n        aabb.width = this.size.width;\r\n        aabb.height = this.size.height;\r\n\r\n        const wp0 = this.worldPoints[0];\r\n        const wp1 = this.worldPoints[1];\r\n        const wp2 = this.worldPoints[2];\r\n        const wp3 = this.worldPoints[3];\r\n\r\n        aabb.transformMat4ToPoints(this.node.worldMatrix, wp0, wp1, wp2, wp3);\r\n\r\n        let minX = Math.min(wp0.x, wp1.x, wp2.x, wp3.x);\r\n        let maxX = Math.max(wp0.x, wp1.x, wp2.x, wp3.x);\r\n        let minY = Math.min(wp0.y, wp1.y, wp2.y, wp3.y);\r\n        let maxY = Math.max(wp0.y, wp1.y, wp2.y, wp3.y);\r\n\r\n        aabb.x = minX;\r\n        aabb.y = minY;\r\n        aabb.width = maxX - minX;\r\n        aabb.height = maxY - minY;\r\n    }\r\n\r\n    setContactBegin(cb: Function) {\r\n        this.contactBeginCb = cb;\r\n    }\r\n    setContactEnd(cb: Function) {\r\n        this.contactEndCb = cb;\r\n    }\r\n\r\n    contactBegin(collider: BoxColliderUtil) {\r\n        const key1 = this.getContactKey(collider);\r\n        const key2 = collider.getContactKey(this);\r\n        if (!this.contactColliderObj[key1]) {\r\n            this.contactColliderObj[key1] = collider;\r\n            if (this.contactBeginCb) {\r\n                this.contactBeginCb(this, collider);\r\n            }\r\n        }\r\n\r\n        if (!collider.contactColliderObj[key2]) {\r\n            collider.contactColliderObj[key2] = this;\r\n            if (collider.contactBeginCb) {\r\n                collider.contactBeginCb(collider, this);\r\n            }\r\n        }\r\n    }\r\n    contactEnd(collider: BoxColliderUtil) {\r\n        const key1 = this.getContactKey(collider);\r\n        const key2 = collider.getContactKey(this);\r\n\r\n        let collider1 = this.contactColliderObj[key1];\r\n        if (collider1 && collider1 == collider) {\r\n            this.contactColliderObj[key1] = undefined;\r\n            if (this.contactEndCb) {\r\n                this.contactEndCb(this, collider);\r\n            }\r\n        }\r\n\r\n        let collider2 = collider.contactColliderObj[key2];\r\n        if (collider2 && collider2 == this) {\r\n            collider.contactColliderObj[key2] = undefined;\r\n            if (collider.contactEndCb) {\r\n                collider.contactEndCb(collider, this);\r\n            }\r\n        }\r\n    }\r\n\r\n    update() {\r\n        // @ts-ignore\r\n        if (!EDITOR || cc.GAME_VIEW) {\r\n            return;\r\n        }\r\n        if (!this.isSync) {\r\n            return;\r\n        }\r\n        let boxCollider = null;\r\n        let colliderArr = this.getComponents(BoxCollider2D);\r\n        for (let i = 0; i < colliderArr.length; i++) {\r\n            let collider = colliderArr[i];\r\n            if (collider.tag == this.tag) {\r\n                boxCollider = collider;\r\n                break;\r\n            }\r\n        }\r\n        if (!boxCollider) {\r\n            return;\r\n        }\r\n\r\n        this.offset.x = boxCollider.offset.x;\r\n        this.offset.y = boxCollider.offset.y;\r\n\r\n        this.size.width = boxCollider.size.width;\r\n        this.size.height = boxCollider.size.height;\r\n    }\r\n\r\n}\r\n\r\n"]}