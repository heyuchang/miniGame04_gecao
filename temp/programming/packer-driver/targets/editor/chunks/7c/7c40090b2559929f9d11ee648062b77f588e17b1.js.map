{"version":3,"sources":["file:///G:/cocos/%E6%9C%AB%E6%97%A5%E7%89%B9%E5%B7%A5%E9%98%9F/assets/scripts/game/engine/MotionStreakAssemblerUtil.ts"],"names":["normal","out","dir","x","y","computeMiter","miter","lineA","lineB","halfThick","maxMultiple","add","_tangent","normalize","_vec2","multiple","dot","Math","min","Color","v3","Vec2","JSB","cocosUtil","MotionStreakUtil","_normal","MotionStreakAssemblerUtil","createData","comp","renderData","requestRenderData","dataLength","resize","tmpVec3","update","dt","stroke","node","tx","getPosition","ty","points","cur","length","point","difx","dify","minSeg","Point","unshift","setPoint","time","fadeTime","vertexCount","indexCount","updateRenderDataCache","color","cr","r","cg","g","cb","b","ca","a","prev","distance","subtract","setDir","data","findLast","i","p","splice","progress","next","da","c","offset","tmpX","tmpY","pos","convertToWorldSpaceWithPos","u","v","_val","createQuadIndices","chunk","setIndexBuffer","QUAD_INDICES","updateWorldVertexAllData","updateRenderData","texture","renderDrawInfo","setVertDirty","hasChangedFlags","stride","floatStride","dataList","vData","vb","z","toArray","vid","meshBuffer","indexOffset","Uint16Array","l","start","passDirty","updatePass","nodeDirty","updateNode","textureDirty","updateTexture","material","getRenderMaterial","hashDirty","updateHash","updateColor","fillBuffers","renderer","vertexOffset","vert","bid","bufferId","ib","iData","setDirty","MotionStreakAssemblerManager","getAssembler","Assembler"],"mappings":"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","sourcesContent":["import { Color, IAssembler, RenderData, v3, Vec2 } from \"cc\";\r\nimport { JSB } from \"cc/env\";\r\nimport { cocosUtil } from \"../../utils/cocosUtil\";\r\nimport { MotionStreakUtil } from \"./MotionStreakUtil\";\r\n\r\nconst _tangent = new Vec2();\r\n// const _miter = new Vec2();\r\nconst _normal = new Vec2();\r\nconst _vec2 = new Vec2();\r\nlet QUAD_INDICES;\r\n\r\nfunction normal(out: Vec2, dir: Vec2) {\r\n    // get perpendicular\r\n    out.x = -dir.y;\r\n    out.y = dir.x;\r\n    return out;\r\n}\r\n\r\nfunction computeMiter(miter, lineA, lineB, halfThick, maxMultiple) {\r\n    // get tangent line\r\n    lineA.add(lineB, _tangent);\r\n    _tangent.normalize();\r\n\r\n    // get miter as a unit vector\r\n    miter.x = -_tangent.y;\r\n    miter.y = _tangent.x;\r\n    _vec2.x = -lineA.y;\r\n    _vec2.y = lineA.x;\r\n\r\n    // get the necessary length of our miter\r\n    let multiple = 1 / miter.dot(_vec2);\r\n    if (maxMultiple) {\r\n        multiple = Math.min(multiple, maxMultiple);\r\n    }\r\n    return halfThick * multiple;\r\n}\r\n\r\nexport const MotionStreakAssemblerUtil: IAssembler = {\r\n    createData(comp: MotionStreakUtil) {\r\n        const renderData = comp.requestRenderData();\r\n        renderData.dataLength = 4;\r\n        renderData.resize(16, (16 - 2) * 3);\r\n        return renderData;\r\n    },\r\n\r\n    tmpVec3: v3(0, 0, 0),\r\n    update(comp: MotionStreakUtil, dt: number) {\r\n        const stroke = comp.stroke / 2;\r\n\r\n        const node = comp.node;\r\n        const tx = node.getPosition().x;\r\n        const ty = node.getPosition().y;\r\n\r\n        const points = comp.points;\r\n\r\n        let cur;\r\n        if (points.length > 1) {\r\n            const point = points[0];\r\n            const difx = point.point.x - tx;\r\n            const dify = point.point.y - ty;\r\n            if ((difx * difx + dify * dify) < comp.minSeg) {\r\n                cur = point;\r\n            }\r\n        }\r\n\r\n        if (!cur) {\r\n            cur = new MotionStreakUtil.Point();\r\n            points.unshift(cur);\r\n        }\r\n\r\n        cur.setPoint(tx, ty);\r\n        cur.time = comp.fadeTime + dt;\r\n\r\n        let vertexCount = 0;\r\n        let indexCount = 0;\r\n\r\n        if (points.length < 2) {\r\n            return;\r\n        }\r\n\r\n        const renderData = comp.renderData!;\r\n        this.updateRenderDataCache(comp, renderData);\r\n        const color = comp.color;\r\n        const cr = color.r;\r\n        const cg = color.g;\r\n        const cb = color.b;\r\n        const ca = color.a;\r\n\r\n        const prev = points[1];\r\n        prev.distance = Vec2.subtract(_vec2, cur.point, prev.point).length();\r\n        _vec2.normalize();\r\n        prev.setDir(_vec2.x, _vec2.y);\r\n        cur.setDir(_vec2.x, _vec2.y);\r\n\r\n        renderData.dataLength = points.length * 2;\r\n\r\n        const data = renderData.data;\r\n        const fadeTime = comp.fadeTime;\r\n        let findLast = false;\r\n        for (let i = points.length - 1; i >= 0; i--) {\r\n            const p = points[i];\r\n            const point = p.point;\r\n            const dir = p.dir;\r\n            p.time -= dt;\r\n\r\n            if (p.time < 0) {\r\n                points.splice(i, 1);\r\n                continue;\r\n            }\r\n\r\n            const progress = p.time / fadeTime;\r\n\r\n            const next = points[i - 1];\r\n            if (!findLast) {\r\n                if (!next) {\r\n                    points.splice(i, 1);\r\n                    continue;\r\n                }\r\n\r\n                point.x = next.point.x - dir.x * progress;\r\n                point.y = next.point.y - dir.y * progress;\r\n            }\r\n            findLast = true;\r\n\r\n            normal(_normal, dir);\r\n\r\n            const da = progress * ca;\r\n            const c = ((da << 24) >>> 0) + (cb << 16) + (cg << 8) + cr;\r\n\r\n            let offset = vertexCount;\r\n\r\n            let tmpX = point.x + _normal.x * stroke;\r\n            let tmpY = point.y + _normal.y * stroke;\r\n            this.tmpVec3.x = tmpX;\r\n            this.tmpVec3.y = tmpY;\r\n            let pos = cocosUtil.convertToWorldSpaceWithPos(node, this.tmpVec3);\r\n            data[offset].x = pos.x;\r\n            data[offset].y = pos.y;\r\n\r\n            data[offset].u = 1;\r\n            data[offset].v = progress;\r\n            data[offset].color._val = c;\r\n\r\n            offset += 1;\r\n\r\n            // data[offset].x = point.x - _normal.x * stroke;\r\n            // data[offset].y = point.y - _normal.y * stroke;\r\n            tmpX = point.x - _normal.x * stroke;\r\n            tmpY = point.y - _normal.y * stroke;\r\n            this.tmpVec3.x = tmpX;\r\n            this.tmpVec3.y = tmpY;\r\n            pos = cocosUtil.convertToWorldSpaceWithPos(node, this.tmpVec3);\r\n            data[offset].x = pos.x;\r\n            data[offset].y = pos.y;\r\n\r\n            data[offset].u = 0;\r\n            data[offset].v = progress;\r\n            data[offset].color._val = c;\r\n\r\n            vertexCount += 2;\r\n        }\r\n\r\n        indexCount = vertexCount <= 2 ? 0 : (vertexCount - 2) * 3;\r\n\r\n        renderData.resize(vertexCount, indexCount); // resize\r\n\r\n        if (JSB) {\r\n            const indexCount = renderData.indexCount;\r\n            this.createQuadIndices(comp, indexCount);\r\n            renderData.chunk.setIndexBuffer(QUAD_INDICES);\r\n\r\n            //  Fill all dataList to vData\r\n            this.updateWorldVertexAllData(comp);\r\n\r\n            renderData.updateRenderData(comp, comp.texture!);\r\n            // No need update WorldMatrix, so change dirty flag\r\n            // A dirty hack\r\n            renderData.renderDrawInfo.setVertDirty(false);\r\n            comp.node.hasChangedFlags = 0;\r\n        }\r\n    },\r\n\r\n    updateWorldVertexAllData(comp: MotionStreakUtil) {\r\n        const renderData = comp.renderData!;\r\n        const stride = renderData.floatStride;\r\n        const dataList = renderData.data;\r\n        const vData = renderData.chunk.vb;\r\n        for (let i = 0; i < dataList.length; i++) {\r\n            const offset = i * stride;\r\n            vData[offset + 0] = dataList[i].x;\r\n            vData[offset + 1] = dataList[i].y;\r\n            vData[offset + 2] = dataList[i].z;\r\n            vData[offset + 3] = dataList[i].u;\r\n            vData[offset + 4] = dataList[i].v;\r\n            Color.toArray(vData, dataList[i].color, offset + 5);\r\n        }\r\n    },\r\n\r\n    createQuadIndices(comp, indexCount) {\r\n        const renderData = comp.renderData!;\r\n        const chunk = renderData.chunk;\r\n        const vid = 0;\r\n        const meshBuffer = chunk.meshBuffer;\r\n        let indexOffset = meshBuffer.indexOffset;\r\n        QUAD_INDICES = null;\r\n        QUAD_INDICES = new Uint16Array(indexCount);\r\n        for (let i = 0, l = indexCount; i < l; i += 2) {\r\n            const start = vid + i;\r\n            QUAD_INDICES[indexOffset++] = start;\r\n            QUAD_INDICES[indexOffset++] = start + 2;\r\n            QUAD_INDICES[indexOffset++] = start + 1;\r\n            QUAD_INDICES[indexOffset++] = start + 1;\r\n            QUAD_INDICES[indexOffset++] = start + 2;\r\n            QUAD_INDICES[indexOffset++] = start + 3;\r\n        }\r\n    },\r\n\r\n    updateRenderDataCache(comp: MotionStreakUtil, renderData: RenderData) {\r\n        if (renderData.passDirty) {\r\n            renderData.updatePass(comp);\r\n        }\r\n        if (renderData.nodeDirty) {\r\n            renderData.updateNode(comp);\r\n        }\r\n        if (renderData.textureDirty && comp.texture) {\r\n            renderData.updateTexture(comp.texture);\r\n            renderData.material = comp.getRenderMaterial(0);\r\n        }\r\n        if (renderData.hashDirty) {\r\n            renderData.updateHash();\r\n        }\r\n    },\r\n\r\n    updateRenderData(comp: MotionStreakUtil) {\r\n    },\r\n\r\n    updateColor(comp: MotionStreakUtil) {\r\n    },\r\n\r\n    fillBuffers(comp: MotionStreakUtil, renderer: any) {\r\n        const renderData = comp.renderData!;\r\n        const chunk = renderData.chunk;\r\n        const dataList = renderData.data;\r\n\r\n        const vertexCount = renderData.vertexCount;\r\n        const indexCount = renderData.indexCount;\r\n\r\n        const vData = chunk.vb;\r\n        let vertexOffset = 0;\r\n        for (let i = 0; i < vertexCount; i++) {\r\n            const vert = dataList[i];\r\n            vData[vertexOffset++] = vert.x;\r\n            vData[vertexOffset++] = vert.y;\r\n            vData[vertexOffset++] = vert.z;\r\n            vData[vertexOffset++] = vert.u;\r\n            vData[vertexOffset++] = vert.v;\r\n            Color.toArray(vData, vert.color, vertexOffset);\r\n            vertexOffset += 4;\r\n        }\r\n\r\n        // fill index data\r\n        const bid = chunk.bufferId;\r\n        const vid = chunk.vertexOffset;\r\n        const meshBuffer = chunk.meshBuffer;\r\n        const ib = chunk.meshBuffer.iData;\r\n        let indexOffset = meshBuffer.indexOffset;\r\n        for (let i = 0, l = indexCount; i < l; i += 2) {\r\n            const start = vid + i;\r\n            ib[indexOffset++] = start;\r\n            ib[indexOffset++] = start + 2;\r\n            ib[indexOffset++] = start + 1;\r\n            ib[indexOffset++] = start + 1;\r\n            ib[indexOffset++] = start + 2;\r\n            ib[indexOffset++] = start + 3;\r\n        }\r\n\r\n        meshBuffer.indexOffset += renderData.indexCount;\r\n        meshBuffer.setDirty();\r\n    },\r\n};\r\n\r\nexport const MotionStreakAssemblerManager = {\r\n    getAssembler(comp: MotionStreakUtil) {\r\n        return MotionStreakAssemblerUtil;\r\n    },\r\n};\r\n\r\nMotionStreakUtil.Assembler = MotionStreakAssemblerManager;\r\n"]}