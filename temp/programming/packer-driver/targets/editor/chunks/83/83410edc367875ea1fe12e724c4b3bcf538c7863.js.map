{"version":3,"sources":["file:///G:/cocos/%E6%9C%AB%E6%97%A5%E7%89%B9%E5%B7%A5%E9%98%9F/assets/scripts/game/manager/resManager.ts"],"names":["ResManager","ResLoader","AssetConfig","assetManager","sp","SpriteFrame","Texture2D","myLog","constructor","instance","_instance","loadAsset","bundleName","path","assetType","onProgress","onComplete","bundle","getBundle","get","loadAssetFunc","load","finish","total","err","asset","e","message","loadBundle","retBundle","loadAssetByPathArr","pathArr","length","lastPercent","onePercent","assetPercents","Map","count","arr","i","p","set","percent","forEach","push","loadAssetByBundleDir","dir","loadDir","item","assetArr","loadBundleArr","nameArr","releaseAsset","loadAssetConfigArr","assetConfigArr","isAddRef","index","loadedAssetArr","tmpFunc","type","error","loadedAsset","addRef","loadSpriteFrame","cb","loadSpineData","SkeletonData","resManager","addAsset","indexOf","releaseAllAsset","decRef"],"mappings":"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","sourcesContent":["import { Asset, assetManager, AssetManager, sp, SpriteFrame, Texture2D } from \"cc\";\r\nimport { myLog } from \"../../common/myLog\";\r\n\r\nclass ResManager {\r\n\r\n    private static _instance: ResManager;\r\n    private constructor() { }\r\n    public static get instance(): ResManager {\r\n        if (!this._instance) {\r\n            this._instance = new ResManager();\r\n        }\r\n        return this._instance;\r\n    }\r\n\r\n    /**\r\n     * 从bundle中加载某个资源，优先使用缓存中的\r\n     * @param bundleName bundle名称\r\n     * @param path 资源路径\r\n     * @param assetType 资源类型\r\n     * @param onProgress 加载进度回调\r\n     * @param onComplete 加载完成回调\r\n     */\r\n    loadAsset(bundleName: string, path: string, assetType: any, onProgress?: Function, onComplete?: Function) {\r\n        if (assetType == SpriteFrame) {\r\n            path += \"/spriteFrame\";\r\n        } else if (assetType == Texture2D) {\r\n            path += \"/texture\";\r\n        }\r\n        let bundle = assetManager.getBundle(bundleName);\r\n        if (bundle && bundle.get(path, assetType)) {\r\n            if (onComplete) {\r\n                onComplete(null, bundle.get(path, assetType));\r\n            }\r\n            return;\r\n        }\r\n\r\n        let loadAssetFunc = () => {\r\n            bundle.load(path, assetType, (finish: number, total: number) => {\r\n                if (onProgress) {\r\n                    onProgress(finish / total);\r\n                }\r\n            }, (err, asset) => {\r\n                if (err) {\r\n                    myLog.e(\"ResManager.loadAsset error:\" + err.message, \"bundleName:\" + bundleName, \"path:\" + path, err);\r\n                    if (onComplete) {\r\n                        onComplete(err);\r\n                    }\r\n                    return;\r\n                }\r\n                if (onComplete) {\r\n                    onComplete(null, asset);\r\n                }\r\n            });\r\n        };\r\n\r\n        if (!bundle) {\r\n            assetManager.loadBundle(bundleName, (err, retBundle) => {\r\n                if (err) {\r\n                    if (onComplete) {\r\n                        onComplete(err);\r\n                    }\r\n                    return;\r\n                }\r\n                bundle = retBundle;\r\n                loadAssetFunc();\r\n            });\r\n            return;\r\n        }\r\n\r\n        loadAssetFunc();\r\n    }\r\n\r\n    /**\r\n     * 加载某个bundle中的批量同类型资源\r\n     * @param bundleName bundle名称\r\n     * @param pathArr 资源路径数组\r\n     * @param assetType 资源类型\r\n     * @param onProgress 进度回调\r\n     * @param onComplete 完成回调\r\n     */\r\n    loadAssetByPathArr(bundleName: string, pathArr: string[], assetType: any, onProgress?: Function, onComplete?: Function) {\r\n        let total = pathArr.length;\r\n        if (total <= 0) {\r\n            if (onComplete) {\r\n                onComplete([]);\r\n            }\r\n            return;\r\n        }\r\n        let lastPercent = 0;\r\n        let onePercent = 1 / total;\r\n        let assetPercents: Map<string, number> = new Map();\r\n        let count = 0;\r\n        let arr = [];\r\n        for (let i = 0; i < total; i++) {\r\n            let path = pathArr[i];\r\n            this.loadAsset(bundleName, path, assetType, (p: number) => {\r\n                assetPercents.set(path, p);\r\n                if (onProgress) {\r\n                    let percent = 0;\r\n                    assetPercents.forEach((p: number) => {\r\n                        percent = percent + onePercent * p;\r\n                    });\r\n                    if (percent >= lastPercent) {\r\n                        lastPercent = percent;\r\n                        onProgress(percent);\r\n                    }\r\n                }\r\n            }, (err, asset) => {\r\n                count++;\r\n                if (!err && asset) {\r\n                    asset.path = path;\r\n                    arr.push(asset);\r\n                }\r\n                if (count >= total) {\r\n                    if (onComplete) {\r\n                        onComplete(arr);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 加载bundle某个目录下的所有同类型资源\r\n     * @param bundleName bundle名称\r\n     * @param dir 目录\r\n     * @param assetType 资源类型\r\n     * @param onProgress 进度回调\r\n     * @param onComplete 完成回调\r\n     */\r\n    loadAssetByBundleDir(bundleName: string, dir: string, assetType: any, onProgress?: Function, onComplete?: Function) {\r\n        let bundle = assetManager.getBundle(bundleName);\r\n\r\n        let loadAssetFunc = () => {\r\n            bundle.loadDir(dir, assetType, (finish: number, total: number, item: AssetManager.RequestItem) => {\r\n                if (onProgress) {\r\n                    onProgress(finish / total, item);\r\n                }\r\n            }, (err, assetArr) => {\r\n                if (err) {\r\n                    myLog.e(\"ResManager.loadAssetByBundleDir loadDir error:\" + err.message, err);\r\n                }\r\n                if (onComplete) {\r\n                    onComplete(assetArr);\r\n                }\r\n            });\r\n        };\r\n\r\n        if (!bundle) {\r\n            assetManager.loadBundle(bundleName, (err, retBundle) => {\r\n                if (err) {\r\n                    myLog.e(\"ResManager.loadAssetByBundleDir loadBundle error:\" + err.message, err);\r\n                    return;\r\n                }\r\n                bundle = retBundle;\r\n                loadAssetFunc();\r\n            });\r\n            return;\r\n        }\r\n\r\n        loadAssetFunc();\r\n    }\r\n\r\n    /**\r\n     * 单纯加载一批bundle\r\n     * @param nameArr bundle名称数组 \r\n     * @param onProgress 进度回调\r\n     * @param onComplete 完成回调\r\n     */\r\n    loadBundleArr(nameArr: string[], onProgress?: Function, onComplete?: Function) {\r\n        let total = nameArr.length;\r\n        if (total <= 0) {\r\n            if (onComplete) {\r\n                onComplete();\r\n            }\r\n            return;\r\n        }\r\n        let count = 0;\r\n        let arr = [];\r\n        for (let i = 0; i < total; i++) {\r\n            let bundleName = nameArr[i];\r\n            assetManager.loadBundle(bundleName, (err, retBundle) => {\r\n                count++;\r\n                if (!err) {\r\n                    arr.push(retBundle);\r\n                }\r\n                if (count >= total) {\r\n                    if (onComplete) {\r\n                        onComplete(arr);\r\n                    }\r\n                }\r\n                if (onProgress) {\r\n                    onProgress(count / total);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    // 强制释放某资源\r\n    releaseAsset(asset: Asset) {\r\n        assetManager.releaseAsset(asset);\r\n    }\r\n\r\n    /**\r\n     * 加载资源清单数组\r\n     * @param assetConfigArr 资源清单数组\r\n        [\r\n            {\r\n                bundle : \"common\",\r\n                path : \"\",\r\n                type : Prefab\r\n            }\r\n        ]\r\n     * @param isAddRef 是否增加引用计数\r\n     * @param onProgress 进度回调\r\n     * @param onComplete 完成回调\r\n     */\r\n    loadAssetConfigArr(assetConfigArr: [AssetConfig], isAddRef: boolean = false, onProgress?: Function, onComplete?: Function) {\r\n        let total = 0;\r\n        if (assetConfigArr && assetConfigArr.length > 0) {\r\n            total = assetConfigArr.length;\r\n        }\r\n        if (total <= 0) {\r\n            if (onComplete) {\r\n                onComplete();\r\n            }\r\n            return;\r\n        }\r\n\r\n        let index = 0;\r\n        let loadedAssetArr = [];\r\n        let tmpFunc = () => {\r\n            let asset = assetConfigArr[index];\r\n            if (!asset) {\r\n                // 全部加载完成\r\n                if (onComplete) {\r\n                    onComplete(loadedAssetArr);\r\n                }\r\n                return;\r\n            }\r\n            this.loadAsset(asset.bundle, asset.path, asset.type, null, (error, loadedAsset) => {\r\n                if (!error && loadedAsset) {\r\n                    loadedAssetArr.push(loadedAsset);\r\n                    if (isAddRef) {\r\n                        loadedAsset.addRef();\r\n                    }\r\n                    asset.asset = loadedAsset;\r\n                }\r\n                index++;\r\n                tmpFunc();\r\n                if (onProgress) {\r\n                    onProgress(index / total);\r\n                }\r\n            });\r\n        };\r\n        tmpFunc();\r\n    }\r\n\r\n\r\n    loadSpriteFrame(bundleName: string, path: string, cb?: Function) {\r\n        this.loadAsset(bundleName, path, SpriteFrame, null, (err, sp: SpriteFrame) => {\r\n            if (cb) {\r\n                cb(err, sp);\r\n            }\r\n        });\r\n    }\r\n\r\n    loadSpineData(bundleName: string, path: string, cb?: Function) {\r\n        this.loadAsset(bundleName, path, sp.SkeletonData, null, (err, sp: sp.SkeletonData) => {\r\n            if (cb) {\r\n                cb(err, sp);\r\n            }\r\n        });\r\n    }\r\n\r\n}\r\n\r\nconst resManager = ResManager.instance;\r\n\r\nclass ResLoader {\r\n\r\n    public loadedAssetArr: Asset[] = [];\r\n\r\n    public addAsset(asset: Asset) {\r\n        if (!asset) {\r\n            return;\r\n        }\r\n        if (this.loadedAssetArr.indexOf(asset) == -1) {\r\n            asset.addRef();\r\n            this.loadedAssetArr.push(asset);\r\n        }\r\n    }\r\n\r\n    public releaseAllAsset() {\r\n        this.loadedAssetArr.forEach((asset: Asset) => {\r\n            asset.decRef();\r\n        });\r\n        this.loadedAssetArr = [];\r\n    }\r\n\r\n}\r\n\r\nclass AssetConfig {\r\n    bundle: string;\r\n    path: string;\r\n    type: any;\r\n    // 加载成功后，得到的资源对象\r\n    asset?: any;\r\n}\r\n\r\nexport { resManager, ResLoader, AssetConfig };\r\n\r\n"]}