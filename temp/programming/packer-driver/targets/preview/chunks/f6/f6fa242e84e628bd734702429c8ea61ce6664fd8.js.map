{"version":3,"sources":["file:///G:/cocos/%E6%9C%AB%E6%97%A5%E7%89%B9%E5%B7%A5%E9%98%9F/assets/scripts/tyqSDK/network/GameMemoryStorage.ts"],"names":["_decorator","ccclass","property","GameMemoryStorage","getItem","key","localStorage","setItem","value","encrypt","removeItem","len","Object","keys","memory","length","k","push","content","decrypt","publicKey","isEncrypt"],"mappings":";;;;;;;;;;AAAQA,MAAAA,U,OAAAA,U;;;;;;;;;OACF;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBF,U;;yBAITG,iB,GADpBF,O,qBAAD,MACqBE,iBADrB,CACuC;AAEnC;AACA;AACwB;AAIH,eAAPC,OAAO,CAACC,GAAD,EAAY;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAOC,YAAY,CAACF,OAAb,CAAqBC,GAArB,CAAP;AACH;;AAEoB,eAAPE,OAAO,CAACF,GAAD,EAAaG,KAAb,EAA0B;AAC3C;AACAF,UAAAA,YAAY,CAACC,OAAb,CAAqBF,GAArB,EAAyB,KAAKI,OAAL,CAAaD,KAAb,CAAzB;AACH;;AAEuB,eAAVE,UAAU,CAACL,GAAD,EAAY;AAChC;AACAC,UAAAA,YAAY,CAACI,UAAb,CAAwBL,GAAxB;AACH;;AAEgB,eAAHM,GAAG,GAAE;AACf,iBAAOC,MAAM,CAACC,IAAP,CAAY,KAAKC,MAAjB,EAAyBC,MAAhC;AACH;;AAEiB,eAAJF,IAAI,GAAE;AAChB,cAAIA,IAAI,GAAG,EAAX;;AACA,eAAK,IAAIG,CAAT,IAAc,KAAKF,MAAnB,EAA0B;AACtBD,YAAAA,IAAI,CAACI,IAAL,CAAUD,CAAV;AACH;;AACD,iBAAOH,IAAP;AACH;;AAEoB,eAAPJ,OAAO,CAACS,OAAD,EAAgB;AACjC,iBAAOA,OAAP,CADiC,CAEjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEH;;AAEoB,eAAPC,OAAO,CAACD,OAAD,EAAgB;AACjC,iBAAOA,OAAP,CADiC,CAEjC;AACA;AACH;;AAhEkC,O,UAI5BJ,M,GAAa,E,UACbM,S,GAAY,iB,UACZC,S,GAAY,K","sourcesContent":["import {_decorator, Component, game,} from 'cc';\r\nconst { ccclass, property } = _decorator;\r\nimport { WECHAT } from 'cc/env';\r\n\r\n@ccclass\r\nexport default class GameMemoryStorage {\r\n\r\n    //用户登录区服，然后拉取服务端记录，原有代码接口不变，底层存取数据改为内存，另外再备份到磁盘已备修改器修改上传，规避获取不到磁盘数据的情况。\r\n    //修改以后，所有数据存取都是走内存，当用户重新登录的时候，内存自动清空，再清空本地磁盘数据\r\n    static memory:any = {}; //内存\r\n    static publicKey = \"JmksO12Ldl60Lsk\"\r\n    static isEncrypt = false;\r\n\r\n    public static getItem(key:string){\r\n        // if(!this.memory.hasOwnProperty(key)){\r\n        //     return \"\"\r\n        // }\r\n        // let res = \"\";\r\n        // try{\r\n        //     res = this.decrypt(this.memory[key]);\r\n        // }catch (e){\r\n        //     res = this.memory[key]\r\n        // }\r\n        // res = this.memory[key]\r\n        // res = localStorage.getItem(key);\r\n        return localStorage.getItem(key)\r\n    }\r\n\r\n    public static setItem(key:string, value:string){\r\n        // this.memory[key] = value+\"\";\r\n        localStorage.setItem(key,this.encrypt(value));\r\n    }\r\n\r\n    public static removeItem(key:string){\r\n        // delete this.memory[key];\r\n        localStorage.removeItem(key);\r\n    }\r\n\r\n    public static len(){\r\n        return Object.keys(this.memory).length;\r\n    }\r\n\r\n    public static keys(){\r\n        let keys = [];\r\n        for (let k in this.memory){\r\n            keys.push(k);\r\n        }\r\n        return keys;\r\n    }\r\n\r\n    public static encrypt(content:string){\r\n        return content\r\n        // if(this.isEncrypt==false) return content;\r\n        // return  encrypt.encrypt(JSON.stringify(content),this.publicKey,256);\r\n        //加密解密示例代码\r\n        // var secretkey= 'open_sesame'; // 加密密钥\r\n        // var dataString = content\r\n        // var encrypted = encrypt.encrypt(dataString,secretkey,256);\r\n        // var myString=JSON.parse(encrypt.decrypt(encrypted,secretkey,256))\r\n        // cc.log('原始字符串:'+dataString)\r\n        // cc.log('加密后:'+encrypted)\r\n        // cc.log('解密后看看对不对:'+myString)\r\n\r\n    }\r\n\r\n    public static decrypt(content:string){\r\n        return content\r\n        // if(this.isEncrypt==false) return content;\r\n        // return JSON.parse(encrypt.decrypt(content,this.publicKey,256));\r\n    }\r\n\r\n}\r\n"]}