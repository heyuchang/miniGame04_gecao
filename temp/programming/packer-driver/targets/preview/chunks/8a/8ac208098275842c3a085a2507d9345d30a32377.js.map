{"version":3,"sources":["file:///G:/cocos/%E6%9C%AB%E6%97%A5%E7%89%B9%E5%B7%A5%E9%98%9F/assets/scripts/tyqSDK/network/TimeCtr.ts"],"names":["_decorator","Component","director","tyqSDK","ccclass","property","TimeCtr","urls","getUrl","httpUrl","serverTime","diffServerTime","isRunServerTime","loginTime","curSystemDate","GetInstance","instance","InitTimeCtr","UpdateServerTime","time","getScheduler","unschedule","updateTimer","schedule","UpdateServerTimeByHeartbeat","ReInit","ServerTime","Date","now","ServerDate","RequestTime","call","i","length","url","isOk","result","request","then","r","catch","Promise","resolve","reject","xhr","XMLHttpRequest","timeout","onreadystatechange","console","log","statusText","readyState","status","respone","responseText","message","JSON","parse","Number","ontimeout","res","onerror","error","open","setRequestHeader","send"],"mappings":";;;;;;;;;;;;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;AAAYC,MAAAA,S,OAAAA,S;AAAuBC,MAAAA,Q,OAAAA,Q;;AACnCC,MAAAA,M,iBAAAA,M;;;;;;;;;OAEH;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBL,U;;yBAGTM,O,WADpBF,OAAO,CAAC,SAAD,C,2BAAR,MACqBE,OADrB,SACqCL,SADrC,CAC8C;AAAA;AAAA;AAAA,eAY1CM,IAZ0C,GAY1B,CAEZ;AACA;AACA;AACA;AAAA;AAAA,gCAAOC,MAAP,GAAgBC,OAAhB,GAAwB,UALZ,CAMZ;AACA;AACA;AACA;AATY,WAZ0B;AAAA,eAwBnCC,UAxBmC,GAwBf,CAxBe;AAAA,eAyBnCC,cAzBmC,GAyBX,CAzBW;AAAA,eA0BnCC,eA1BmC,GA0BV,KA1BU;AAAA,eA2B1CC,SA3B0C,GA2BvB,EA3BuB;AAAA,eA4BnCC,aA5BmC,GA4BnB,CA5BmB;AAAA;;AAIjB,eAAXC,WAAW,GAAE;AACvB,cAAI,CAAC,KAAKC,QAAV,EAAoB;AAChB,iBAAKA,QAAL,GAAgB,IAAIV,OAAJ,EAAhB;AACA,iBAAKU,QAAL,CAAcC,WAAd;AACH;;AACD,iBAAO,KAAKD,QAAZ;AACH;;AAoBDC,QAAAA,WAAW,GAAE,CAEZ;;AAEDC,QAAAA,gBAAgB,CAACC,IAAD,EAAa;AACzBjB,UAAAA,QAAQ,CAACkB,YAAT,GAAwBC,UAAxB,CAAmC,KAAKC,WAAxC,EAAoD,IAApD,EADyB,CAEzB;;AACA,eAAKZ,UAAL,GAAkBS,IAAlB;AACA,eAAKL,aAAL,GAAqBK,IAArB,CAJyB,CAKzB;;AACAjB,UAAAA,QAAQ,CAACkB,YAAT,GAAwBG,QAAxB,CAAiC,KAAKD,WAAtC,EAAmD,IAAnD,EAAyD,CAAzD,EANyB,CAOzB;AACA;AACH;;AAEDE,QAAAA,2BAA2B,CAACL,IAAD,EAAa;AACpC;AACA,eAAKT,UAAL,GAAkBS,IAAlB;AACA,eAAKL,aAAL,GAAqBK,IAArB;AACH;;AAEDM,QAAAA,MAAM,GAAE;AACLvB,UAAAA,QAAQ,CAACkB,YAAT,GAAwBC,UAAxB,CAAmC,KAAKC,WAAxC,EAAoD,IAApD;AACF;;AAEMA,QAAAA,WAAW,GAAG;AACvB;AACM,eAAKV,eAAL,GAAuB,IAAvB,CAFiB,CAGjB;AACA;AACA;AACA;AACA;AACN;;AAEgB,YAAVc,UAAU,GAAE;AACZ,cAAI,KAAKhB,UAAL,IAAmB,CAAvB,EAA0B;AACtB,mBAAO,KAAKA,UAAZ;AACH;;AACD,iBAAOiB,IAAI,CAACC,GAAL,EAAP;AACH;;AAEa,YAAVC,UAAU,GAAE;AACZ,cAAI,KAAKnB,UAAL,IAAmB,CAAvB,EAA0B;AACtB,mBAAO,IAAIiB,IAAJ,CAAS,KAAKjB,UAAd,CAAP;AACH;AACJ;;AAEYoB,QAAAA,WAAW,CAACC,IAAD,EAAgB;AAAA;;AAAA;AACpC,iBAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAI,CAACzB,IAAL,CAAU0B,MAA9B,EAAsCD,CAAC,EAAvC,EAA2C;AACvC,kBAAME,GAAG,GAAG,KAAI,CAAC3B,IAAL,CAAUyB,CAAV,CAAZ;AACA,kBAAIG,IAAI,GAAG,KAAX;AACA,kBAAIC,MAAU,GAAG,EAAjB;AACA,oBAAM,KAAI,CAACC,OAAL,CAAaH,GAAb,EAAkBI,IAAlB,CAAwBC,CAAD,IAAK;AAC9BJ,gBAAAA,IAAI,GAAG,IAAP;AACAC,gBAAAA,MAAM,GAAGG,CAAT;AACH,eAHK,EAGHC,KAHG,CAGID,CAAD,IAAK;AACVJ,gBAAAA,IAAI,GAAG,KAAP;AACAC,gBAAAA,MAAM,GAAGG,CAAT;AACH,eANK,CAAN;;AAQA,kBAAIJ,IAAJ,EAAU;AACNJ,gBAAAA,IAAI,CAACK,MAAD,CAAJ;AACA;AACH;AACJ;;AAEDL,YAAAA,IAAI,CAAC;AAACK,cAAAA,MAAM,EAAC;AAAR,aAAD,CAAJ,CAnBoC,CAoB1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACM;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEN;AACM;AACN;AAEA;AACA;AACM;AACN;AACA;AAEA;AACA;AACA;AACM;AACN;AACA;AACA;AACA;AACM;AAGN;AACM;AA9DoC;AA+D1C;;AAGUC,QAAAA,OAAO,CAACH,GAAD,EAAY;AACvB,iBAAO,IAAIO,OAAJ,CAAY,CAACC,OAAD,EAASC,MAAT,KAAkB;AACjC,gBAAIC,GAAG,GAAG,IAAIC,cAAJ,EAAV;AACAD,YAAAA,GAAG,CAACE,OAAJ,GAAc,OAAK,CAAnB;;AACAF,YAAAA,GAAG,CAACG,kBAAJ,GAAyB,MAAM;AAC3BC,cAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA0BL,GAAG,CAACM,UAA9B;;AACA,kBAAIN,GAAG,CAACO,UAAJ,KAAmB,CAAnB,IAAyBP,GAAG,CAACQ,MAAJ,IAAc,GAAd,IAAqBR,GAAG,CAACQ,MAAJ,GAAa,GAA/D,EAAqE;AACjE,oBAAIC,OAAO,GAAGT,GAAG,CAACU,YAAlB;;AACA,oBAAI,CAACD,OAAL,EAAc;AACVL,kBAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BI,OAA1B;AACA;AACH;;AACDL,gBAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAqBI,OAArB;AACA,oBAAIE,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWJ,OAAX,CAAd,CAPiE,CAQjE;AACA;AAEA;AACA;AACA;AACA;;AACA,oBAAIE,OAAO,CAAC7C,UAAZ,EAAwB;AACpB,sBAAIS,IAAI,GAAGuC,MAAM,CAACH,OAAO,CAAC7C,UAAT,CAAjB;AACAgC,kBAAAA,OAAO,CAAC;AAACN,oBAAAA,MAAM,EAAC,IAAR;AAAajB,oBAAAA,IAAI,EAACA;AAAlB,mBAAD,CAAP;AACH,iBAHD,MAII;AACAwB,kBAAAA,MAAM,CAAC;AAACP,oBAAAA,MAAM,EAAC;AAAR,mBAAD,CAAN;AACH;AAEJ,eAzB0B,CA0B3B;AACA;AACA;;AACH,aA7BD;;AA+BAQ,YAAAA,GAAG,CAACe,SAAJ,GAAiBC,GAAD,IAAS;AACrB;AACAjB,cAAAA,MAAM,CAAC;AAACP,gBAAAA,MAAM,EAAC;AAAR,eAAD,CAAN,CAFqB,CAGrB;AACH,aAJD;;AAMAQ,YAAAA,GAAG,CAACiB,OAAJ,GAAeC,KAAD,IAAW;AACrB;AACA;AACAnB,cAAAA,MAAM,CAAC;AAACP,gBAAAA,MAAM,EAAC;AAAR,eAAD,CAAN;AACH,aAJD,CAxCiC,CA6CjC;;;AACAQ,YAAAA,GAAG,CAACmB,IAAJ,CAAS,MAAT,EAAiB7B,GAAjB,EAAsB,IAAtB;AACAU,YAAAA,GAAG,CAACoB,gBAAJ,CAAqB,cAArB,EAAqC,kBAArC,EA/CiC,CAkDjC;;AACApB,YAAAA,GAAG,CAACqB,IAAJ;AACH,WApDM,CAAP;AAqDH;;AAtMyC,O,UAE3BjD,Q,GAAmB,I","sourcesContent":["import { _decorator, Component, Node , sys, director} from 'cc';\r\nimport { tyqSDK } from '../tyqSDK';\r\nimport { GNetConf } from './conf';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('TimeCtr')\r\nexport default class TimeCtr extends Component{\r\n\r\n    private static instance:TimeCtr = null!;\r\n\r\n    public static GetInstance(){\r\n        if (!this.instance) {\r\n            this.instance = new TimeCtr();\r\n            this.instance.InitTimeCtr();\r\n        }\r\n        return this.instance;\r\n    }\r\n\r\n    urls:string[] = [\r\n        \r\n        // \"http://124.71.202.184/time.php\",\r\n        // \"http://192.168.0.113/time.php\",\r\n        // 'https://otheve.beacon.qq.com/analytics/upload?tp=js',//tx2\r\n        tyqSDK.getUrl().httpUrl+'/isAlive',\r\n        // \"http://www.baidu.com\",//百度\r\n        // 'http://vv.video.qq.com/checktime?otype=json',//tx1\r\n        // 'http://api.m.taobao.com/rest/api3.do?api=mtop.common.getTimestamp',//tb //http://api.m.taobao.com/rest/api3.do?api=mtop.common.getTimestamp\r\n        // 'http://quan.suning.com/getSysTime.do',//sn http://quan.suning.com/getSysTime.do\r\n    ];\r\n\r\n    public serverTime:number = 0;\r\n    public diffServerTime:number = 0;\r\n    public isRunServerTime:boolean =false;\r\n    loginTime:string = '';\r\n    public curSystemDate = 0;\r\n    \r\n    InitTimeCtr(){\r\n\r\n    }\r\n\r\n    UpdateServerTime(time:number){\r\n        director.getScheduler().unschedule(this.updateTimer,this)\r\n        // time = new Date().getTime();// 修改服务器时间为本地进行测试 !!\r\n        this.serverTime = time;\r\n        this.curSystemDate = time;\r\n        // console.log(\"date:\",new Date(time))\r\n        director.getScheduler().schedule(this.updateTimer, this, 1);\r\n        // let now = new Date(time);\r\n        // console.log(\"now:\",now,now.getFullYear(),now.getMonth()+1,now.getDate(),\"星期:\"+now.getDay())\r\n    }\r\n\r\n    UpdateServerTimeByHeartbeat(time:number){\r\n        // console.warn(\"---时间同步----\", time)\r\n        this.serverTime = time;\r\n        this.curSystemDate = time;\r\n    }\r\n\r\n    ReInit(){\r\n       director.getScheduler().unschedule(this.updateTimer,this)\r\n    }\r\n\r\n    public updateTimer() {\r\n\t\t// this.serverTime += 1000;\r\n        this.isRunServerTime = true;\r\n        // 检查是否隔天了..\r\n        // if (App.center.GetNowDateString() != this.loginTime && this.loginTime != '') {\r\n        //     App.Instance.InitCtr();\r\n        //     this.loginTime = App.center.GetNowDateString();\r\n        // }\r\n\t}\r\n\r\n    get ServerTime(){\r\n        if (this.serverTime != 0) {\r\n            return this.serverTime;\r\n        }\r\n        return Date.now();\r\n    }\r\n\r\n    get ServerDate(){\r\n        if (this.serverTime != 0) {\r\n            return new Date(this.serverTime);\r\n        }\r\n    }\r\n\r\n    public async RequestTime(call:Function) {\r\n        for (let i = 0; i < this.urls.length; i++) {\r\n            const url = this.urls[i];\r\n            let isOk = false;\r\n            let result:any = {};\r\n            await this.request(url).then((r)=>{\r\n                isOk = true;\r\n                result = r;\r\n            }).catch((r)=>{\r\n                isOk = false;\r\n                result = r;\r\n            })\r\n\r\n            if (isOk) {\r\n                call(result);\r\n                return;\r\n            }\r\n        }\r\n\r\n        call({result:false});\r\n\t\t// let xhr = cc.loader.getXMLHttpRequest();\r\n\t\t// xhr.timeout = 1000*3 ;\r\n\t\t// xhr.onreadystatechange = () => {\r\n\t\t// \t// console.log(\"statusText:\",self.xhr.statusText);\r\n\t\t// \tif (xhr.readyState === 4 && (xhr.status >= 200 && xhr.status < 300)) {\r\n\t\t// \t\tlet respone = xhr.responseText;\r\n\t\t// \t\tif (!respone) {\r\n\t\t// \t\t\tconsole.log('http error', respone);\r\n\t\t// \t\t\treturn;\r\n\t\t// \t\t}\r\n\t\t// \t\tconsole.log('收到的消息:',respone);\r\n        //         let message = JSON.parse(respone);\r\n        //         if (message.result == 200) {\r\n        //             // console.log(\"serverTime:\",message.serverTime);\r\n        //             let time = Number(message.serverTime);\r\n        //             // let date = new Date(time);\r\n        //             // console.log(\"date:\",date)\r\n        //             call({result:true,time:time});\r\n        //         }\r\n                \r\n\t\t// \t}\r\n        //     // console.log(\"xhr.getAllResponseHeaders():\",xhr.getAllResponseHeaders())\r\n\t\t// };\r\n\r\n\t\t// xhr.ontimeout = (res) => {\r\n\t\t// \tconsole.log('ontimeout:', res);\r\n        //     call({result:false})\r\n\t\t// \t// NetMgr.getInstance ().repeatNet(mid);\r\n\t\t// };\r\n\r\n\t\t// xhr.onerror = (error) => {\r\n\t\t// \t// 尝试重新发送\r\n\t\t// \tconsole.log('http.POST Error', error);\r\n        //     call({result:false})\r\n\t\t// };\r\n\t\t// let url = this.urls[0];\r\n\t\t// console.log('url:', url);\r\n\t\t// xhr.open('POST', url, true);\r\n        // xhr.setRequestHeader('Content-Type', 'application/json;charset=utf-8');\r\n        \r\n\r\n\t\t// // xhr.send(JSON.stringify(msg));\r\n        // xhr.send();\r\n\t}\r\n\r\n\r\n    private request(url:string){\r\n        return new Promise((resolve,reject)=>{\r\n            let xhr = new XMLHttpRequest();\r\n            xhr.timeout = 1000*3 ;\r\n            xhr.onreadystatechange = () => {\r\n                console.log(\"statusText:\",xhr.statusText);\r\n                if (xhr.readyState === 4 && (xhr.status >= 200 && xhr.status < 300)) {\r\n                    let respone = xhr.responseText;\r\n                    if (!respone) {\r\n                        console.log('http error', respone);\r\n                        return;\r\n                    }\r\n                    console.log('收到的消息:',respone);\r\n                    let message = JSON.parse(respone);\r\n                    // if (message.result == 200) {\r\n                    //     // console.log(\"serverTime:\",message.serverTime);\r\n                        \r\n                    // }\r\n                    // else{\r\n                    //     reject({result:false})\r\n                    // }\r\n                    if (message.serverTime) {\r\n                        let time = Number(message.serverTime);\r\n                        resolve({result:true,time:time});\r\n                    }\r\n                    else{\r\n                        reject({result:false})\r\n                    }\r\n                    \r\n                }\r\n                // else{\r\n                //     reject({result:false})\r\n                // }\r\n            };\r\n\r\n            xhr.ontimeout = (res) => {\r\n                // console.log('ontimeout:', res);\r\n                reject({result:false})\r\n                // NetMgr.getInstance ().repeatNet(mid);\r\n            };\r\n\r\n            xhr.onerror = (error) => {\r\n                // 尝试重新发送\r\n                // console.log('http.POST Error', error);\r\n                reject({result:false})\r\n            };\r\n            // console.log('url:', url);\r\n            xhr.open('POST', url, true);\r\n            xhr.setRequestHeader('Content-Type', 'application/json');\r\n            \r\n\r\n            // xhr.send(JSON.stringify(msg));\r\n            xhr.send();\r\n        })\r\n    }\r\n\r\n\r\n\r\n}\r\n"]}