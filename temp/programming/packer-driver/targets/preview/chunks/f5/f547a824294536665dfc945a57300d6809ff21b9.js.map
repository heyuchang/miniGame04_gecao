{"version":3,"sources":["file:///G:/cocos/%E6%9C%AB%E6%97%A5%E7%89%B9%E5%B7%A5%E9%98%9F/assets/scripts/tyqSDK/network/md5.ts"],"names":["MD5","data","fflog","msg","e","to_zerofilled_hex","n","t1","toString","t2","substr","length","chars_to_bytes","ac","retval","i","concat","str_to_bytes","int64_to_bytes","num","push","rol","places","fF","b","c","d","fG","fH","fI","bytes_to_int32","arr","off","str","charCodeAt","tmp","encodeURIComponent","charAt","split","j","parseInt","int128le_to_hex","a","ra","t","ta","arguments","databytes","constructor","Array","org_len","tail","h0","h1","h2","h3","_add","n1","n2","updateRun","nf","sin32","dw32","b32","temp","ptr"],"mappings":"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","sourcesContent":["\r\n\r\nexport default function MD5(data){\r\n    // for test/debug\r\n    function fflog(msg) {\r\n        try {\r\n            //console.log(msg);\r\n        } catch(e) {}\r\n    }\r\n \r\n    // convert number to (unsigned) 32 bit hex, zero filled string\r\n    function to_zerofilled_hex(n) {\r\n        var t1 = (n >>> 24).toString(16);\r\n        var t2 = (n & 0x00FFFFFF).toString(16);\r\n        return \"00\".substr(0, 2 - t1.length) + t1 +\r\n            \"000000\".substr(0, 6 - t2.length) + t2;\r\n    }\r\n \r\n    // convert array of chars to array of bytes (note: Unicode not supported)\r\n    function chars_to_bytes(ac) {\r\n        var retval = [];\r\n        for (var i = 0; i < ac.length; i++) {\r\n            retval = retval.concat(str_to_bytes(ac[i]));\r\n        }\r\n        return retval;\r\n    }\r\n \r\n \r\n    // convert a 64 bit unsigned number to array of bytes. Little endian\r\n    function int64_to_bytes(num) {\r\n        var retval = [];\r\n        for (var i = 0; i < 8; i++) {\r\n            retval.push(num & 0xFF);\r\n            num = num >>> 8;\r\n        }\r\n        return retval;\r\n    }\r\n \r\n    //  32 bit left-rotation\r\n    function rol(num, places) {\r\n        return ((num << places) & 0xFFFFFFFF) | (num >>> (32 - places));\r\n    }\r\n \r\n    // The 4 MD5 functions\r\n    function fF(b, c, d) {\r\n        return (b & c) | (~b & d);\r\n    }\r\n \r\n    function fG(b, c, d) {\r\n        return (d & b) | (~d & c);\r\n    }\r\n \r\n    function fH(b, c, d) {\r\n        return b ^ c ^ d;\r\n    }\r\n \r\n    function fI(b, c, d) {\r\n        return c ^ (b | ~d);\r\n    }\r\n \r\n    // pick 4 bytes at specified offset. Little-endian is assumed\r\n    function bytes_to_int32(arr, off) {\r\n        return (arr[off + 3] << 24) | (arr[off + 2] << 16) | (arr[off + 1] << 8) | (arr[off]);\r\n    }\r\n \r\n    /*\r\n     Conver string to array of bytes in UTF-8 encoding\r\n     See:\r\n     http://www.dangrossman.info/2007/05/25/handling-utf-8-in-javascript-php-and-non-utf8-databases/\r\n     http://stackoverflow.com/questions/1240408/reading-bytes-from-a-javascript-string\r\n     How about a String.getBytes(<ENCODING>) for Javascript!? Isn't it time to add it?\r\n     */\r\n    function str_to_bytes(str) {\r\n        // alert(\"got \" + str.length + \" chars\")\r\n        var retval = [ ];\r\n        for (var i = 0; i < str.length; i++)\r\n            if (str.charCodeAt(i) <= 0x7F) {\r\n                retval.push(str.charCodeAt(i));\r\n            } else {\r\n                var tmp = encodeURIComponent(str.charAt(i)).substr(1).split('%');\r\n                for (var j = 0; j < tmp.length; j++) {\r\n                    retval.push(parseInt(tmp[j], 0x10));\r\n                }\r\n            }\r\n        return retval;\r\n    };\r\n \r\n \r\n    // convert the 4 32-bit buffers to a 128 bit hex string. (Little-endian is assumed)\r\n    function int128le_to_hex(a, b, c, d) {\r\n        var ra = \"\";\r\n        var t = 0;\r\n        var ta = 0;\r\n        for (var i = 3; i >= 0; i--) {\r\n            ta = arguments[i];\r\n            t = (ta & 0xFF);\r\n            ta = ta >>> 8;\r\n            t = t << 8;\r\n            t = t | (ta & 0xFF);\r\n            ta = ta >>> 8;\r\n            t = t << 8;\r\n            t = t | (ta & 0xFF);\r\n            ta = ta >>> 8;\r\n            t = t << 8;\r\n            t = t | ta;\r\n            ra = ra + to_zerofilled_hex(t);\r\n        }\r\n        return ra;\r\n    }\r\n \r\n    // check input data type and perform conversions if needed\r\n    var databytes = null;\r\n    // String\r\n    if (typeof data == 'string') {\r\n        // convert string to array bytes\r\n        databytes = str_to_bytes(data);\r\n    } else if (data.constructor == Array) {\r\n        if (data.length === 0) {\r\n            // if it's empty, just assume array of bytes\r\n            databytes = data;\r\n        } else if (typeof data[0] == 'string') {\r\n            databytes = chars_to_bytes(data);\r\n        } else if (typeof data[0] == 'number') {\r\n            databytes = data;\r\n        } else {\r\n            fflog(\"input data type mismatch\");\r\n            return null;\r\n        }\r\n    } else {\r\n        fflog(\"input data type mismatch\");\r\n        return null;\r\n    }\r\n \r\n    // save original length\r\n    var org_len = databytes.length;\r\n \r\n    // first append the \"1\" + 7x \"0\"\r\n    databytes.push(0x80);\r\n \r\n    // determine required amount of padding\r\n    var tail = databytes.length % 64;\r\n    // no room for msg length?\r\n    if (tail > 56) {\r\n        // pad to next 512 bit block\r\n        for (var i = 0; i < (64 - tail); i++) {\r\n            databytes.push(0x0);\r\n        }\r\n        tail = databytes.length % 64;\r\n    }\r\n    for (i = 0; i < (56 - tail); i++) {\r\n        databytes.push(0x0);\r\n    }\r\n    // message length in bits mod 512 should now be 448\r\n    // append 64 bit, little-endian original msg length (in *bits*!)\r\n    databytes = databytes.concat(int64_to_bytes(org_len * 8));\r\n \r\n    // initialize 4x32 bit state\r\n    var h0 = 0x67452301;\r\n    var h1 = 0xEFCDAB89;\r\n    var h2 = 0x98BADCFE;\r\n    var h3 = 0x10325476;\r\n \r\n    // temp buffers\r\n    var a = 0,\r\n        b = 0,\r\n        c = 0,\r\n        d = 0;\r\n \r\n \r\n    function _add(n1, n2) {\r\n        return 0x0FFFFFFFF & (n1 + n2)\r\n    }\r\n \r\n    // function update partial state for each run\r\n    var updateRun = function(nf, sin32, dw32, b32) {\r\n        var temp = d;\r\n        d = c;\r\n        c = b;\r\n        //b = b + rol(a + (nf + (sin32 + dw32)), b32);\r\n        b = _add(b,\r\n            rol(\r\n                _add(a,\r\n                    _add(nf, _add(sin32, dw32))\r\n                ), b32\r\n            )\r\n        );\r\n        a = temp;\r\n    };\r\n \r\n \r\n    // Digest message\r\n    for (i = 0; i < databytes.length / 64; i++) {\r\n        // initialize run\r\n        a = h0;\r\n        b = h1;\r\n        c = h2;\r\n        d = h3;\r\n \r\n        var ptr = i * 64;\r\n \r\n        // do 64 runs\r\n        updateRun(fF(b, c, d), 0xd76aa478, bytes_to_int32(databytes, ptr), 7);\r\n        updateRun(fF(b, c, d), 0xe8c7b756, bytes_to_int32(databytes, ptr + 4), 12);\r\n        updateRun(fF(b, c, d), 0x242070db, bytes_to_int32(databytes, ptr + 8), 17);\r\n        updateRun(fF(b, c, d), 0xc1bdceee, bytes_to_int32(databytes, ptr + 12), 22);\r\n        updateRun(fF(b, c, d), 0xf57c0faf, bytes_to_int32(databytes, ptr + 16), 7);\r\n        updateRun(fF(b, c, d), 0x4787c62a, bytes_to_int32(databytes, ptr + 20), 12);\r\n        updateRun(fF(b, c, d), 0xa8304613, bytes_to_int32(databytes, ptr + 24), 17);\r\n        updateRun(fF(b, c, d), 0xfd469501, bytes_to_int32(databytes, ptr + 28), 22);\r\n        updateRun(fF(b, c, d), 0x698098d8, bytes_to_int32(databytes, ptr + 32), 7);\r\n        updateRun(fF(b, c, d), 0x8b44f7af, bytes_to_int32(databytes, ptr + 36), 12);\r\n        updateRun(fF(b, c, d), 0xffff5bb1, bytes_to_int32(databytes, ptr + 40), 17);\r\n        updateRun(fF(b, c, d), 0x895cd7be, bytes_to_int32(databytes, ptr + 44), 22);\r\n        updateRun(fF(b, c, d), 0x6b901122, bytes_to_int32(databytes, ptr + 48), 7);\r\n        updateRun(fF(b, c, d), 0xfd987193, bytes_to_int32(databytes, ptr + 52), 12);\r\n        updateRun(fF(b, c, d), 0xa679438e, bytes_to_int32(databytes, ptr + 56), 17);\r\n        updateRun(fF(b, c, d), 0x49b40821, bytes_to_int32(databytes, ptr + 60), 22);\r\n        updateRun(fG(b, c, d), 0xf61e2562, bytes_to_int32(databytes, ptr + 4), 5);\r\n        updateRun(fG(b, c, d), 0xc040b340, bytes_to_int32(databytes, ptr + 24), 9);\r\n        updateRun(fG(b, c, d), 0x265e5a51, bytes_to_int32(databytes, ptr + 44), 14);\r\n        updateRun(fG(b, c, d), 0xe9b6c7aa, bytes_to_int32(databytes, ptr), 20);\r\n        updateRun(fG(b, c, d), 0xd62f105d, bytes_to_int32(databytes, ptr + 20), 5);\r\n        updateRun(fG(b, c, d), 0x2441453, bytes_to_int32(databytes, ptr + 40), 9);\r\n        updateRun(fG(b, c, d), 0xd8a1e681, bytes_to_int32(databytes, ptr + 60), 14);\r\n        updateRun(fG(b, c, d), 0xe7d3fbc8, bytes_to_int32(databytes, ptr + 16), 20);\r\n        updateRun(fG(b, c, d), 0x21e1cde6, bytes_to_int32(databytes, ptr + 36), 5);\r\n        updateRun(fG(b, c, d), 0xc33707d6, bytes_to_int32(databytes, ptr + 56), 9);\r\n        updateRun(fG(b, c, d), 0xf4d50d87, bytes_to_int32(databytes, ptr + 12), 14);\r\n        updateRun(fG(b, c, d), 0x455a14ed, bytes_to_int32(databytes, ptr + 32), 20);\r\n        updateRun(fG(b, c, d), 0xa9e3e905, bytes_to_int32(databytes, ptr + 52), 5);\r\n        updateRun(fG(b, c, d), 0xfcefa3f8, bytes_to_int32(databytes, ptr + 8), 9);\r\n        updateRun(fG(b, c, d), 0x676f02d9, bytes_to_int32(databytes, ptr + 28), 14);\r\n        updateRun(fG(b, c, d), 0x8d2a4c8a, bytes_to_int32(databytes, ptr + 48), 20);\r\n        updateRun(fH(b, c, d), 0xfffa3942, bytes_to_int32(databytes, ptr + 20), 4);\r\n        updateRun(fH(b, c, d), 0x8771f681, bytes_to_int32(databytes, ptr + 32), 11);\r\n        updateRun(fH(b, c, d), 0x6d9d6122, bytes_to_int32(databytes, ptr + 44), 16);\r\n        updateRun(fH(b, c, d), 0xfde5380c, bytes_to_int32(databytes, ptr + 56), 23);\r\n        updateRun(fH(b, c, d), 0xa4beea44, bytes_to_int32(databytes, ptr + 4), 4);\r\n        updateRun(fH(b, c, d), 0x4bdecfa9, bytes_to_int32(databytes, ptr + 16), 11);\r\n        updateRun(fH(b, c, d), 0xf6bb4b60, bytes_to_int32(databytes, ptr + 28), 16);\r\n        updateRun(fH(b, c, d), 0xbebfbc70, bytes_to_int32(databytes, ptr + 40), 23);\r\n        updateRun(fH(b, c, d), 0x289b7ec6, bytes_to_int32(databytes, ptr + 52), 4);\r\n        updateRun(fH(b, c, d), 0xeaa127fa, bytes_to_int32(databytes, ptr), 11);\r\n        updateRun(fH(b, c, d), 0xd4ef3085, bytes_to_int32(databytes, ptr + 12), 16);\r\n        updateRun(fH(b, c, d), 0x4881d05, bytes_to_int32(databytes, ptr + 24), 23);\r\n        updateRun(fH(b, c, d), 0xd9d4d039, bytes_to_int32(databytes, ptr + 36), 4);\r\n        updateRun(fH(b, c, d), 0xe6db99e5, bytes_to_int32(databytes, ptr + 48), 11);\r\n        updateRun(fH(b, c, d), 0x1fa27cf8, bytes_to_int32(databytes, ptr + 60), 16);\r\n        updateRun(fH(b, c, d), 0xc4ac5665, bytes_to_int32(databytes, ptr + 8), 23);\r\n        updateRun(fI(b, c, d), 0xf4292244, bytes_to_int32(databytes, ptr), 6);\r\n        updateRun(fI(b, c, d), 0x432aff97, bytes_to_int32(databytes, ptr + 28), 10);\r\n        updateRun(fI(b, c, d), 0xab9423a7, bytes_to_int32(databytes, ptr + 56), 15);\r\n        updateRun(fI(b, c, d), 0xfc93a039, bytes_to_int32(databytes, ptr + 20), 21);\r\n        updateRun(fI(b, c, d), 0x655b59c3, bytes_to_int32(databytes, ptr + 48), 6);\r\n        updateRun(fI(b, c, d), 0x8f0ccc92, bytes_to_int32(databytes, ptr + 12), 10);\r\n        updateRun(fI(b, c, d), 0xffeff47d, bytes_to_int32(databytes, ptr + 40), 15);\r\n        updateRun(fI(b, c, d), 0x85845dd1, bytes_to_int32(databytes, ptr + 4), 21);\r\n        updateRun(fI(b, c, d), 0x6fa87e4f, bytes_to_int32(databytes, ptr + 32), 6);\r\n        updateRun(fI(b, c, d), 0xfe2ce6e0, bytes_to_int32(databytes, ptr + 60), 10);\r\n        updateRun(fI(b, c, d), 0xa3014314, bytes_to_int32(databytes, ptr + 24), 15);\r\n        updateRun(fI(b, c, d), 0x4e0811a1, bytes_to_int32(databytes, ptr + 52), 21);\r\n        updateRun(fI(b, c, d), 0xf7537e82, bytes_to_int32(databytes, ptr + 16), 6);\r\n        updateRun(fI(b, c, d), 0xbd3af235, bytes_to_int32(databytes, ptr + 44), 10);\r\n        updateRun(fI(b, c, d), 0x2ad7d2bb, bytes_to_int32(databytes, ptr + 8), 15);\r\n        updateRun(fI(b, c, d), 0xeb86d391, bytes_to_int32(databytes, ptr + 36), 21);\r\n \r\n        // update buffers\r\n        h0 = _add(h0, a);\r\n        h1 = _add(h1, b);\r\n        h2 = _add(h2, c);\r\n        h3 = _add(h3, d);\r\n    }\r\n    // Done! Convert buffers to 128 bit (LE)\r\n    return int128le_to_hex(h3, h2, h1, h0);//.toUpperCase();\r\n}"]}