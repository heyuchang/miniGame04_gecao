{"version":3,"sources":["file:///G:/cocos/%E6%9C%AB%E6%97%A5%E7%89%B9%E5%B7%A5%E9%98%9F/assets/scripts/game/engine/PhysicsWorld.ts"],"names":["PhysicsWorld","Intersection2D","PhysicsSystem2D","_decorator","utilTools","BoxColliderUtil","ccclass","property","cellSize","colliderArr","posToColliderArr","getInstance","_instance","getPosKey","x","y","forColliderRectKeyArr","collider","cb","rect","worldAabb","minX","Math","floor","maxX","ceil","width","minY","maxY","height","i","j","key","addIntoPosToColliderArr","arr","push","collectCollider","node","active","activeInHierarchy","getComponents","forArr","enabled","updateCollider","children","ch","step","otherCollider","doIntersection","collider1","collider2","collisionMatrix","instance","group","ret","polygonPolygon","worldPoints","contactBegin","contactEnd","physicsWorld"],"mappings":"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","sourcesContent":["import { Intersection2D, Node, PhysicsSystem2D, _decorator } from 'cc';\r\nimport { myLog } from '../../common/myLog';\r\nimport { utilTools } from '../../utils/utilTools';\r\nimport { BoxColliderUtil } from './BoxColliderUtil';\r\nconst { ccclass, property } = _decorator;\r\n\r\n\r\nclass PhysicsWorld {\r\n\r\n    private static _instance: PhysicsWorld = null;\r\n    private cellSize = 100;\r\n\r\n    private colliderArr: any[];\r\n    private posToColliderArr: any = {};\r\n\r\n    public static getInstance() {\r\n        if (this._instance == null) {\r\n            this._instance = new PhysicsWorld();\r\n\r\n            // myLog.i(PhysicsSystem2D.instance.collisionMatrix);\r\n        }\r\n        return this._instance;\r\n    }\r\n\r\n    private getPosKey(x: number, y: number): string {\r\n        return \"\" + x + \"_\" + y;\r\n    }\r\n\r\n    private forColliderRectKeyArr(collider: BoxColliderUtil, cb: Function) {\r\n        const rect = collider.worldAabb;\r\n\r\n        let minX = Math.floor(rect.x / this.cellSize);\r\n        let maxX = Math.ceil((rect.x + rect.width) / this.cellSize);\r\n\r\n        let minY = Math.floor(rect.y / this.cellSize);\r\n        let maxY = Math.ceil((rect.y + rect.height) / this.cellSize);\r\n\r\n        for (let i = minX; i <= maxX; i++) {\r\n            for (let j = minY; j <= maxY; j++) {\r\n                let key = this.getPosKey(i, j);\r\n                cb(key);\r\n            }\r\n        }\r\n    }\r\n\r\n    private addIntoPosToColliderArr(collider: BoxColliderUtil) {\r\n        this.forColliderRectKeyArr(collider, (key: string) => {\r\n            let arr = this.posToColliderArr[key];\r\n            if (!arr) {\r\n                arr = [];\r\n                this.posToColliderArr[key] = arr;\r\n            }\r\n            arr.push(collider);\r\n        });\r\n    }\r\n\r\n    private collectCollider(node: Node) {\r\n        if (!node.active || !node.activeInHierarchy) {\r\n            return;\r\n        }\r\n        let arr = node.getComponents(BoxColliderUtil);\r\n        utilTools.forArr(arr, (collider: BoxColliderUtil) => {\r\n            if (!collider.enabled) {\r\n                return;\r\n            }\r\n            collider.updateCollider();\r\n            this.colliderArr.push(collider);\r\n            this.addIntoPosToColliderArr(collider);\r\n        });\r\n        utilTools.forArr(node.children, (ch: Node) => {\r\n            this.collectCollider(ch);\r\n        });\r\n    }\r\n\r\n    public step(node: Node) {\r\n        this.colliderArr = [];\r\n        this.posToColliderArr = {};\r\n\r\n        // 收集所有碰撞器信息\r\n        this.collectCollider(node);\r\n\r\n        // 开始碰撞检测\r\n        utilTools.forArr(this.colliderArr, (collider: BoxColliderUtil) => {\r\n            this.forColliderRectKeyArr(collider, (key: string) => {\r\n                let arr = this.posToColliderArr[key];\r\n                if (!arr) {\r\n                    return;\r\n                }\r\n                utilTools.forArr(arr, (otherCollider: BoxColliderUtil) => {\r\n                    this.doIntersection(collider, otherCollider);\r\n                });\r\n            });\r\n        });\r\n    }\r\n\r\n    private doIntersection(collider1: BoxColliderUtil, collider2: BoxColliderUtil) {\r\n        if (collider1 == collider2 || collider1.node == collider2.node) {\r\n            return;\r\n        }\r\n        const collisionMatrix = PhysicsSystem2D.instance.collisionMatrix;\r\n        if ((collisionMatrix[collider1.group] & collider2.group) && (collisionMatrix[collider2.group] & collider1.group)) {\r\n            let ret = Intersection2D.polygonPolygon(collider1.worldPoints, collider2.worldPoints);\r\n            if (ret) {\r\n                // 开始碰撞\r\n                collider1.contactBegin(collider2);\r\n                // myLog.i(collider1.group, collider2.group, ret);\r\n            } else {\r\n                // 结束碰撞\r\n                collider1.contactEnd(collider2);\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport const physicsWorld = PhysicsWorld.getInstance();\r\n\r\n\r\n\r\n"]}