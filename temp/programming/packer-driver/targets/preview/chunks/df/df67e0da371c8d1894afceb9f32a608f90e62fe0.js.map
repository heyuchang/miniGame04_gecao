{"version":3,"sources":["file:///G:/cocos/%E6%9C%AB%E6%97%A5%E7%89%B9%E5%B7%A5%E9%98%9F/assets/scripts/game/manager/audioManager.ts"],"names":["AudioManager","AudioClip","myLog","constants","resManager","constructor","musicAudioSource","effectAudioSource","audioClips","musicVolume","effectVolume","musicName","instance","_instance","setMusicAudioSource","audioSource","setEffectAudioSource","initData","data","undefined","getSaveData","now","loadAllAudio","onProgress","onComplete","loadAssetByBundleDir","bundles","audio","percent","item","assetArr","i","asset","name","loadAudios","pathArr","loadAssetByPathArr","loadAudio","path","loadAsset","err","getMusiceVolume","setMusicVolume","val","Math","round","volume","pause","playMusic","clip","getAudioClip","playing","stop","loop","play","gameOnShow","force","state","getEffectVolume","setEffectVolume","playEffect","effectName","playOneShot","Promise","resolve","audioManager"],"mappings":"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","sourcesContent":["import { AudioClip, AudioSource } from \"cc\";\r\nimport { myLog } from \"../../common/myLog\";\r\nimport { constants } from \"../data/constants\";\r\nimport { resManager } from \"./resManager\";\r\n\r\nclass AudioManager {\r\n\r\n    private static _instance: AudioManager;\r\n    private constructor() { };\r\n    public static get instance(): AudioManager {\r\n        if (!this._instance) {\r\n            this._instance = new AudioManager();\r\n        }\r\n        return this._instance;\r\n    }\r\n\r\n    musicAudioSource: AudioSource;\r\n    effectAudioSource: AudioSource;\r\n\r\n    audioClips: any = {};\r\n\r\n    musicVolume: number = 1;\r\n    effectVolume: number = 1;\r\n    musicName: string = \"\";\r\n\r\n    setMusicAudioSource(audioSource: AudioSource) {\r\n        this.musicAudioSource = audioSource;\r\n    }\r\n\r\n    setEffectAudioSource(audioSource: AudioSource) {\r\n        this.effectAudioSource = audioSource;\r\n    }\r\n\r\n    initData(data: any) {\r\n        if (!data) {\r\n            data = {};\r\n        }\r\n\r\n        if (data.musicVolume != undefined) {\r\n            this.musicVolume = data.musicVolume;\r\n        }\r\n\r\n        if (data.effectVolume != undefined) {\r\n            this.effectVolume = data.effectVolume;\r\n        }\r\n\r\n    }\r\n\r\n    getSaveData(now: Date) {\r\n        let data: any = {};\r\n        data.musicVolume = this.musicVolume;\r\n        data.effectVolume = this.effectVolume;\r\n\r\n        return data;\r\n    }\r\n\r\n    loadAllAudio(onProgress?: Function, onComplete?: Function) {\r\n        resManager.loadAssetByBundleDir(constants.bundles.audio,\r\n            \"\", AudioClip, (percent: number, item: any) => {\r\n                if (percent > 0.96) {\r\n                    // 解决提前回调百分百导致的音频资源还未缓存到audioClips\r\n                    percent = 0.96;\r\n                }\r\n                if (onProgress) {\r\n                    onProgress(percent);\r\n                }\r\n            }, (assetArr: any) => {\r\n                for (let i in assetArr) {\r\n                    let asset = assetArr[i];\r\n                    let name = asset.name;\r\n                    if (!name) {\r\n                        continue;\r\n                    }\r\n                    this.audioClips[name] = asset;\r\n                }\r\n                if (onComplete) {\r\n                    onComplete();\r\n                }\r\n            });\r\n    }\r\n\r\n    loadAudios(pathArr: any, onProgress?: Function, onComplete?: Function) {\r\n        resManager.loadAssetByPathArr(constants.bundles.audio, pathArr, AudioClip, (percent: number) => {\r\n            if (percent > 0.96) {\r\n                // 解决提前回调百分百导致的音频资源还未缓存到audioClips\r\n                percent = 0.96;\r\n            }\r\n            if (onProgress) {\r\n                onProgress(percent);\r\n            }\r\n        }, (assetArr: any) => {\r\n            for (let i in assetArr) {\r\n                let asset = assetArr[i];\r\n                let name = asset.name;\r\n                if (!name) {\r\n                    continue;\r\n                }\r\n                this.audioClips[name] = asset;\r\n            }\r\n            if (onComplete) {\r\n                onComplete();\r\n            }\r\n        });\r\n    }\r\n\r\n    loadAudio(path: string, onComplete?: Function) {\r\n        resManager.loadAsset(constants.bundles.audio, path, AudioClip, null, (err: any, asset: AudioClip) => {\r\n            if (err) {\r\n                if (onComplete) {\r\n                    onComplete();\r\n                }\r\n                return;\r\n            }\r\n            this.audioClips[asset.name] = asset;\r\n            if (onComplete) {\r\n                onComplete(asset);\r\n            }\r\n        });\r\n    }\r\n\r\n    getMusiceVolume(): number {\r\n        return this.musicVolume;\r\n    }\r\n    setMusicVolume(val: number) {\r\n        val = Math.round(val * 1000) / 1000;\r\n        this.musicVolume = val;\r\n        this.musicAudioSource.volume = val;\r\n\r\n        if (val <= 0) {\r\n            this.musicAudioSource.pause();\r\n            return;\r\n        }\r\n        this.playMusic(this.musicName);\r\n    }\r\n    async playMusic(musicName: string) {\r\n        if (!musicName) {\r\n            return;\r\n        }\r\n        this.musicName = musicName;\r\n        if (this.musicVolume <= 0) {\r\n            return;\r\n        }\r\n        let clip: any = await this.getAudioClip(musicName);\r\n        if (!clip) {\r\n            return;\r\n        }\r\n        if (this.musicAudioSource.playing) {\r\n            if (this.musicAudioSource.clip == clip) {\r\n                return;\r\n            }\r\n            this.musicAudioSource.stop();\r\n        }\r\n        this.musicAudioSource.clip = clip;\r\n        this.musicAudioSource.loop = true;\r\n        this.musicAudioSource.play();\r\n    }\r\n\r\n    gameOnShow(force: boolean = false) {\r\n        if (!this.musicAudioSource || this.musicVolume <= 0) {\r\n            return;\r\n        }\r\n        myLog.i(\"===========gameOnShow:\", this.musicAudioSource.playing, this.musicAudioSource.state);\r\n        if (!this.musicAudioSource.playing || force) {\r\n            myLog.i(\"=======call playing\");\r\n            this.musicAudioSource.play();\r\n        }\r\n    }\r\n\r\n    getEffectVolume(): number {\r\n        return this.effectVolume;\r\n    }\r\n    setEffectVolume(val: number) {\r\n        val = Math.round(val * 1000) / 1000;\r\n        this.effectVolume = val;\r\n        this.effectAudioSource.volume = val;\r\n    }\r\n    async playEffect(effectName: string) {\r\n        if (!effectName || this.effectVolume <= 0) {\r\n            return;\r\n        }\r\n        let clip: any = await this.getAudioClip(effectName);\r\n        if (!clip) {\r\n            return;\r\n        }\r\n        this.effectAudioSource.playOneShot(clip);\r\n    }\r\n\r\n    getAudioClip(name: string) {\r\n        return new Promise((resolve) => {\r\n            let clip = this.audioClips[name];\r\n            if (clip) {\r\n                resolve(clip);\r\n                return;\r\n            }\r\n            this.loadAudio(name, (clip: AudioClip) => {\r\n                resolve(clip);\r\n            });\r\n        });\r\n    }\r\n\r\n}\r\n\r\nexport const audioManager = AudioManager.instance;\r\n"]}