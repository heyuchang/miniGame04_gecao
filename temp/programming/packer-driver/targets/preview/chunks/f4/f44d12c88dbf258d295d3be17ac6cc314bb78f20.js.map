{"version":3,"sources":["file:///G:/cocos/%E6%9C%AB%E6%97%A5%E7%89%B9%E5%B7%A5%E9%98%9F/assets/scripts/game/compoment/item/monsters/Monster.ts"],"names":["BoxCollider2D","Component","find","macro","PhysicsSystem2D","ProgressBar","sp","Tween","v2","v3","Vec2","Vec3","view","_decorator","cocosUtil","constants","designManager","mapModel","physicsGroup","AnimationCtrl","ShineColor","ccclass","property","Monster","id","hp","hpMax","atk","speed","row","isBoss","isPauseMove","canFace","distancePlayer","bodyNode","collider","hpProgress","isSpine","shineColor","animationCtrl","direction","touchPlayerTimeCount","targetDirection","vec3Obj","playerPos","nodePos","nodeScale","hpScale","bodyNodeScale","outVec3","vec3Temp","raycastDis","sideRadian","waitHit","monsterUtil","onLoad","node","getComponent","hpProgressNode","Skeleton","addComponent","getScale","clone","onEnable","onDisable","onDestroy","setBodySkin","sk","type","monsterTypes","boss","flag","mapId","setSkin","init","setScale","unscheduleAllCallbacks","stopAllByTarget","removeShineColorMaterial","enabled","playAnimation","animations","walk","getRowById","tableName","monster","size","width","Math","random","PI","getVisibleSize","pos","getRectPos","player","height","position","floor","floorRow","towerFloor","ceil","mapRow","map","atkP","hpP","arr","getTable","monsterTimeAdd","addRow","i","length","time","getLastRow","refreshHpLayer","monsterStr","addComponentOnce","e","getSaveData","data","loadSaveData","monsterSystem","bossMonster","mapLayer","refreshBossHpLayer","animationEndCallback","aniName","recycleSelf","recycleMonsterNode","contactBeginPlayer","touchPlayer","unschedule","schedule","touchTime","REPEAT_FOREVER","contactEndPlayer","hitWithDam","playerForceMove","movePos","getPosition","subtract","negative","radian","angle","normalize","multiplyScalar","add","setPosition","monsterForceMove","monsterPos","dam","scale","tweenHitScale","materialPath","materials","shineColorSpine","startShine","bossSubHp","monsterIds","boxMonster","propSystem","addProp","propIds","boxMonsterCoin","convertToWorldSpace","mapSystem","monsterDead","die","selfDead","color","config","damColor2","damColor1","numSystem","addNum","progress","setDirection","getBulletDirection","x","getInfoPosition","index","isWorld","p","infoNode","active","infoPos","y","convertToWorldSpaceWithPos","getMoveSpeed","updateLogic","dt","getDirection","dir","rotateZ","ZERO","mp","vec3CopyVal","endPos","colliderArr","instance","testPoint","has","k","group","MONSTER","move","distance","abs","moveStop","minDisPlayer","dis","adjustInWall"],"mappings":"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","sourcesContent":["import { BoxCollider2D, Color, Component, find, macro, Node, PhysicsSystem2D, ProgressBar, sp, Tween, v2, v3, Vec2, Vec3, view, _decorator } from 'cc';\r\nimport { cocosUtil } from '../../../../utils/cocosUtil';\r\nimport { constants } from '../../../data/constants';\r\nimport { designManager } from '../../../manager/designManager';\r\nimport { mapModel } from '../../../model/mapModel';\r\nimport { physicsGroup } from '../../../other/physicsGroup';\r\nimport { AnimationCtrl } from '../../base/AnimationCtrl';\r\nimport { ShineColor } from '../../shader/ShineColor';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('Monster')\r\nexport class Monster extends Component {\r\n\r\n    id: number;\r\n    hp: number = 0;\r\n    hpMax: number;\r\n    atk: number = 0;\r\n    speed: number = 0;\r\n    row: any;\r\n    isBoss: number = 0;\r\n\r\n    isPauseMove: boolean;\r\n    canFace: boolean = true;\r\n    distancePlayer: number;\r\n\r\n    bodyNode: Node;\r\n    collider: BoxCollider2D;\r\n    hpProgress: ProgressBar;\r\n\r\n    isSpine: boolean;\r\n    shineColor: ShineColor;\r\n    animationCtrl: AnimationCtrl;\r\n\r\n    direction: Vec3;\r\n    touchPlayerTimeCount: number = 0;\r\n    targetDirection: Vec3;\r\n\r\n    // Vec3集中缓存\r\n    vec3Obj = {\r\n        playerPos: v3(0, 0, 0),\r\n        nodePos: v3(0, 0, 0),\r\n        nodeScale: v3(0, 0, 0),\r\n        hpScale: v3(0, 0, 0),\r\n        bodyNodeScale: v3(0, 0, 0),\r\n\r\n        outVec3: v3(0, 0, 0),\r\n        vec3Temp: v3(0, 0, 0),\r\n    };\r\n\r\n    // 射线检测距离\r\n    raycastDis: number = 0;\r\n    sideRadian: number = 0;\r\n\r\n    waitHit: boolean;\r\n\r\n    monsterUtil: any;\r\n\r\n    onLoad() {\r\n        this.bodyNode = find(\"body\", this.node);\r\n        this.collider = this.node.getComponent(BoxCollider2D);\r\n\r\n        let hpProgressNode = find(\"hpProgress\", this.node);\r\n        if (hpProgressNode) {\r\n            this.hpProgress = hpProgressNode.getComponent(ProgressBar);\r\n        }\r\n\r\n        if (this.bodyNode.getComponent(sp.Skeleton)) {\r\n            this.isSpine = true;\r\n        } else {\r\n            this.isSpine = false;\r\n        }\r\n        this.shineColor = this.bodyNode.addComponent(ShineColor);\r\n        this.animationCtrl = this.bodyNode.addComponent(AnimationCtrl);\r\n\r\n        this.vec3Obj.bodyNodeScale = this.bodyNode.getScale().clone();\r\n\r\n    }\r\n\r\n    onEnable() {\r\n\r\n    }\r\n\r\n    onDisable() {\r\n\r\n    }\r\n\r\n    onDestroy() {\r\n\r\n    }\r\n\r\n    setBodySkin() {\r\n        let sk = this.bodyNode.getComponent(sp.Skeleton);\r\n        if (!sk) {\r\n            return;\r\n        }\r\n        if (this.row.type != constants.monsterTypes.boss) {\r\n            return;\r\n        }\r\n        let flag = 1;\r\n        if (mapModel.mapId == 3 || mapModel.mapId == 4) {\r\n            flag = 2;\r\n        }\r\n        sk.setSkin(\"skin\" + flag);\r\n    }\r\n\r\n    init(id: number) {\r\n        if (!this.bodyNode) {\r\n            this.onLoad();\r\n        }\r\n\r\n        this.node.setScale(v3(1, 1, 1));\r\n\r\n        this.unscheduleAllCallbacks();\r\n        Tween.stopAllByTarget(this.node);\r\n        if (this.shineColor) {\r\n            this.shineColor.removeShineColorMaterial();\r\n        }\r\n\r\n        this.canFace = true;\r\n        this.isPauseMove = false;\r\n        this.distancePlayer = 0;\r\n        this.touchPlayerTimeCount = 0;\r\n        this.targetDirection = null;\r\n\r\n        this.collider.enabled = true;\r\n        this.animationCtrl.playAnimation(constants.animations.walk);\r\n\r\n        let row = designManager.getRowById(constants.tableName.monster, id);\r\n        this.row = row;\r\n\r\n        this.waitHit = false;\r\n\r\n        this.raycastDis = this.collider.size.width / 2;\r\n        this.sideRadian = Math.random() > 0.5 ? Math.PI / 2 : -Math.PI / 2;\r\n\r\n        // 初始位置生成规则：屏幕边缘的随机一个位置\r\n        let size = view.getVisibleSize();\r\n        let pos = cocosUtil.getRectPos(mapModel.player.node, size.width + 100, size.height + 100);\r\n        this.node.position = pos;\r\n\r\n        this.id = id;\r\n        this.atk = row.atk;\r\n        this.hp = row.hp;\r\n        this.speed = row.speed;\r\n        if (mapModel.floor > 0) {\r\n            let floorRow = designManager.getRowById(constants.tableName.towerFloor, mapModel.floor);\r\n            let hp = this.hp * (1 + floorRow.hp / 100);\r\n            this.hp = Math.ceil(hp);\r\n            this.atk = Math.ceil(this.atk * (1 + floorRow.atk / 100));\r\n        }\r\n\r\n        if (row.type != constants.monsterTypes.boss) {\r\n            // 额外加强\r\n            let mapRow = designManager.getRowById(constants.tableName.map, mapModel.mapId);\r\n            let atkP = 1;\r\n            if (mapRow && mapRow.atk > 0) {\r\n                atkP = mapRow.atk;\r\n            }\r\n            let hpP = 1;\r\n            if (mapRow && mapRow.hp > 0) {\r\n                hpP = mapRow.hp;\r\n            }\r\n            this.atk = this.atk * atkP;\r\n            this.hp = this.hp * hpP;\r\n\r\n\r\n            // 怪物随着时间加强\r\n            let arr = designManager.getTable(constants.tableName.monsterTimeAdd);\r\n            let addRow = null;\r\n            for (let i = 0; i < arr.length; i++) {\r\n                let row = arr[i];\r\n                if (mapModel.time <= row.time) {\r\n                    addRow = row;\r\n                    break;\r\n                }\r\n            }\r\n            if (!addRow) {\r\n                addRow = designManager.getLastRow(constants.tableName.monsterTimeAdd);\r\n            }\r\n            this.speed = Math.ceil(this.speed * addRow.speed);\r\n            this.hp = Math.ceil(this.hp * addRow.hp);\r\n            this.atk = Math.ceil(this.atk * addRow.atk);\r\n        }\r\n\r\n        this.hpMax = this.hp;\r\n        this.isBoss = 0;\r\n\r\n        this.refreshHpLayer();\r\n        this.setBodySkin();\r\n\r\n        try {\r\n            let monsterStr = \"Monster\" + id;\r\n            switch (id) {\r\n                case 13:\r\n                case 16:\r\n                case 17:\r\n                    monsterStr = \"Monster13\";\r\n                    break;\r\n                case 12:\r\n                case 18:\r\n                    monsterStr = \"Monster12\";\r\n                    break;\r\n                case 25:\r\n                    monsterStr = \"Monster4\";\r\n                    break;\r\n                case 26:\r\n                    monsterStr = \"Monster5\";\r\n                    break;\r\n                case 27:\r\n                    monsterStr = \"Monster6\";\r\n                    break;\r\n                case 28:\r\n                    monsterStr = \"Monster23\";\r\n                    break;\r\n                case 29:\r\n                    monsterStr = \"Monster22\";\r\n                    break;\r\n                case 30:\r\n                    monsterStr = \"Monster21\";\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n            let monsterUtil = cocosUtil.addComponentOnce(this, monsterStr);\r\n            monsterUtil.unscheduleAllCallbacks();\r\n            this.monsterUtil = monsterUtil;\r\n            // @ts-ignore\r\n            monsterUtil.init(this);\r\n        } catch (e) {\r\n\r\n        }\r\n\r\n    }\r\n\r\n    getSaveData() {\r\n        let data: any = {};\r\n        data.id = this.id;\r\n        data.hp = this.hp;\r\n        data.atk = this.atk;\r\n        data.pos = this.node.position;\r\n        data.isBoss = this.isBoss;\r\n\r\n        return data;\r\n    }\r\n\r\n    loadSaveData(data: any) {\r\n        this.hp = data.hp;\r\n        this.atk = data.atk;\r\n        this.node.position = data.pos;\r\n        this.isBoss = data.isBoss;\r\n\r\n        this.refreshHpLayer();\r\n        if (this.isBoss) {\r\n            // 缓存boss对象\r\n            mapModel.monsterSystem.bossMonster = this;\r\n            mapModel.mapLayer.refreshBossHpLayer();\r\n        }\r\n    }\r\n\r\n    animationEndCallback(aniName: string) {\r\n        this.recycleSelf();\r\n    }\r\n\r\n    recycleSelf() {\r\n        mapModel.monsterSystem.recycleMonsterNode(this.node);\r\n    }\r\n\r\n    // 蹭到玩家\r\n    contactBeginPlayer() {\r\n        this.touchPlayer();\r\n        this.unschedule(this.touchPlayer);\r\n        this.schedule(this.touchPlayer, this.row.touchTime, macro.REPEAT_FOREVER);\r\n    }\r\n    // 结束蹭玩家\r\n    contactEndPlayer() {\r\n        this.unschedule(this.touchPlayer);\r\n    }\r\n    touchPlayer() {\r\n        if (this.touchPlayerTimeCount < this.row.touchTime) {\r\n            return;\r\n        }\r\n        this.touchPlayerTimeCount = 0;\r\n        mapModel.player.hitWithDam(this.atk);\r\n    }\r\n\r\n    // 来自玩家的挤压\r\n    playerForceMove(movePos: Vec3) {\r\n        let playerPos = mapModel.player.node.getPosition();\r\n        let pos = this.node.getPosition();\r\n\r\n        playerPos.subtract(pos).negative();\r\n        // 只有挡在玩家前进方向的怪物才需要推开\r\n        let radian = Vec2.angle(playerPos, movePos);\r\n        if (radian > Math.PI * 0.7) {\r\n            return;\r\n        }\r\n        playerPos.normalize().multiplyScalar(movePos.length());\r\n        pos.add(playerPos);\r\n        this.node.setPosition(pos);\r\n    }\r\n\r\n    // 来自其他怪物的挤压\r\n    monsterForceMove(monster: Monster, movePos: Vec3) {\r\n        if (this.isPauseMove) {\r\n            return;\r\n        }\r\n\r\n        let monsterPos = monster.node.getPosition();\r\n        let pos = this.node.getPosition();\r\n\r\n        monsterPos.subtract(pos).negative();\r\n        // 只有挡在怪物前进方向的怪物才需要推开\r\n        let radian = Vec2.angle(monsterPos, movePos);\r\n        if (radian > Math.PI * 0.7) {\r\n            return;\r\n        }\r\n        monsterPos.normalize().multiplyScalar(movePos.length());\r\n        pos.add(monsterPos);\r\n        this.node.setPosition(pos);\r\n    }\r\n\r\n    // 受到伤害\r\n    hitWithDam(dam: number, shineColor?: Color) {\r\n        if (this.hp <= 0 || dam <= 0) {\r\n            return;\r\n        }\r\n\r\n        // 再加上玩家局外的攻击力\r\n        dam = dam + mapModel.player.atk;\r\n\r\n        // 缩放\r\n        this.bodyNode.scale = this.vec3Obj.bodyNodeScale;\r\n        cocosUtil.tweenHitScale(this.bodyNode, 0.05);\r\n\r\n        if (this.shineColor && this.row.type != constants.monsterTypes.boss) {\r\n            // 闪白\r\n            let materialPath = constants.materials.shineColor;\r\n            if (this.isSpine) {\r\n                materialPath = constants.materials.shineColorSpine;\r\n            }\r\n            this.shineColor.startShine(materialPath, shineColor);\r\n        }\r\n\r\n        this.hp -= dam;\r\n        if (this.hp < 0) {\r\n            this.hp = 0;\r\n        }\r\n        this.refreshHpLayer();\r\n        if (this.isBoss) {\r\n            mapModel.mapLayer.bossSubHp(dam);\r\n        }\r\n        if (this.id == constants.monsterIds.boxMonster) {\r\n            // 宝箱怪掉金币\r\n            mapModel.propSystem.addProp(constants.propIds.boxMonsterCoin, cocosUtil.convertToWorldSpace(this.node));\r\n        }\r\n\r\n        if (this.hp <= 0) {\r\n            // 怪物阵亡\r\n            mapModel.mapSystem.monsterDead(this.id, cocosUtil.convertToWorldSpace(this.node));\r\n            this.unschedule(this.touchPlayer);\r\n            this.collider.enabled = false;\r\n            this.animationCtrl.playAnimation(constants.animations.die, false, (aniName: string) => {\r\n                mapModel.monsterSystem.monsterDead(this.id);\r\n                this.animationEndCallback(aniName);\r\n                if (this.monsterUtil && this.monsterUtil.selfDead) {\r\n                    this.monsterUtil.selfDead();\r\n                }\r\n            });\r\n            if (this.monsterUtil) {\r\n                this.monsterUtil.unscheduleAllCallbacks();\r\n            }\r\n        }\r\n        // 伤害数字\r\n        let color = null;\r\n        if (dam >= designManager.config.damColor2) {\r\n            color = \"#f56d0a\";\r\n        } else if (dam >= designManager.config.damColor1) {\r\n            color = \"#e1b600\";\r\n        }\r\n        mapModel.numSystem.addNum(dam, cocosUtil.convertToWorldSpace(this.node), color);\r\n    }\r\n\r\n    refreshHpLayer() {\r\n        if (!this.hpProgress) {\r\n            return;\r\n        }\r\n        this.hpProgress.progress = this.hp / this.hpMax;\r\n    }\r\n\r\n    setDirection(direction: Vec3) {\r\n        this.direction = direction.normalize();\r\n    }\r\n\r\n    getBulletDirection() {\r\n        let direction = null;\r\n        if (this.node.getScale().x > 0) {\r\n            // 向左\r\n            direction = v3(-1, 0, 0);\r\n        } else {\r\n            // 向右\r\n            direction = v3(1, 0, 0);\r\n        }\r\n        return direction;\r\n    }\r\n\r\n    getInfoPosition(index?: number, isWorld?: boolean) {\r\n        let p = this.node.getPosition();\r\n        let infoNode = find(\"info\", this.node);\r\n        if (index > 0) {\r\n            infoNode = find(\"info\" + index, this.node);\r\n        }\r\n        if (infoNode) {\r\n            infoNode.active = false;\r\n            // 位置修正\r\n            let infoPos = infoNode.getPosition();\r\n            if (this.node.scale.x < 0) {\r\n                infoPos.x = -infoPos.x;\r\n            }\r\n            p.x += infoPos.x;\r\n            p.y += infoPos.y;\r\n        }\r\n        if (isWorld) {\r\n            p = cocosUtil.convertToWorldSpaceWithPos(this.node, p);\r\n        }\r\n\r\n        return p;\r\n    }\r\n\r\n    getMoveSpeed() {\r\n        return this.speed;\r\n    }\r\n\r\n    updateLogic(dt: number) {\r\n        // 向目标点移动，默认是玩家\r\n        mapModel.player.node.getPosition(this.vec3Obj.playerPos);\r\n        this.node.getPosition(this.vec3Obj.nodePos);\r\n        let direction = null;\r\n        if (this.monsterUtil && this.monsterUtil.getDirection) {\r\n            direction = this.monsterUtil.getDirection();\r\n        } else {\r\n            direction = this.vec3Obj.playerPos.subtract(this.vec3Obj.nodePos).normalize();\r\n        }\r\n\r\n        let targetDirection = null;\r\n        for (let i = 0; i < 2; i++) {\r\n            let dir = direction;\r\n            if (i == 1) {\r\n                dir = Vec3.rotateZ(this.vec3Obj.outVec3, direction, Vec3.ZERO, this.sideRadian);\r\n                dir = dir.normalize();\r\n            }\r\n            let mp = dir.multiplyScalar(this.raycastDis);\r\n            cocosUtil.vec3CopyVal(this.vec3Obj.vec3Temp, this.vec3Obj.nodePos);\r\n            let endPos = this.vec3Obj.vec3Temp.add(mp);\r\n            endPos = cocosUtil.convertToWorldSpaceWithPos(this.node, endPos);\r\n            let colliderArr = PhysicsSystem2D.instance.testPoint(v2(endPos.x, endPos.y));\r\n            let has = false;\r\n            for (let k = 0; k < colliderArr.length; k++) {\r\n                let collider = colliderArr[k];\r\n                if (collider != this.collider && (collider.node != this.node)\r\n                    && collider.group == physicsGroup.MONSTER) {\r\n                    has = true;\r\n                    break;\r\n                }\r\n            }\r\n            if (!has) {\r\n                targetDirection = dir;\r\n                break;\r\n            }\r\n        }\r\n        this.targetDirection = targetDirection;\r\n\r\n        if (!this.targetDirection) {\r\n            return;\r\n        }\r\n\r\n        this.targetDirection = this.targetDirection.clone();\r\n    }\r\n\r\n    move(dt: number) {\r\n        this.touchPlayerTimeCount += dt;\r\n\r\n        if (this.hp <= 0) {\r\n            return;\r\n        }\r\n\r\n        mapModel.player.node.getPosition(this.vec3Obj.playerPos);\r\n        this.node.getPosition(this.vec3Obj.nodePos);\r\n        this.distancePlayer = Vec2.distance(this.vec3Obj.nodePos, this.vec3Obj.playerPos);\r\n\r\n        // 朝向玩家\r\n        if (mapModel.player.hp > 0 && this.canFace) {\r\n            this.node.getScale(this.vec3Obj.nodeScale);\r\n            if (this.hpProgress) {\r\n                this.hpProgress.node.getScale(this.vec3Obj.hpScale);\r\n            }\r\n            if (this.vec3Obj.nodePos.x >= this.vec3Obj.playerPos.x) {\r\n                this.vec3Obj.nodeScale.x = Math.abs(this.vec3Obj.nodeScale.x);\r\n                if (this.hpProgress) {\r\n                    this.vec3Obj.hpScale.x = 1;\r\n                }\r\n            } else {\r\n                this.vec3Obj.nodeScale.x = -Math.abs(this.vec3Obj.nodeScale.x);\r\n                if (this.hpProgress) {\r\n                    this.vec3Obj.hpScale.x = -1;\r\n                }\r\n            }\r\n            this.node.scale = this.vec3Obj.nodeScale;\r\n            if (this.hpProgress) {\r\n                this.hpProgress.node.scale = this.vec3Obj.hpScale;\r\n            }\r\n        }\r\n\r\n        let speed = this.getMoveSpeed();\r\n        if (speed <= 0 || this.isPauseMove) {\r\n            return;\r\n        }\r\n\r\n        if (this.monsterUtil && this.monsterUtil.moveStop) {\r\n            return;\r\n        }\r\n\r\n        if (this.monsterUtil && this.monsterUtil.minDisPlayer > 0 && this.distancePlayer <= this.monsterUtil.minDisPlayer) {\r\n            return;\r\n        }\r\n\r\n        if (!this.targetDirection) {\r\n            return;\r\n        }\r\n\r\n        let dis = speed * dt;\r\n        let movePos = this.targetDirection.normalize().multiplyScalar(dis);\r\n        this.direction = movePos;\r\n\r\n        this.node.position = this.vec3Obj.nodePos.add(movePos);\r\n        if (this.row.type == constants.monsterTypes.boss) {\r\n            mapModel.mapSystem.adjustInWall(this.node);\r\n        }\r\n\r\n    }\r\n\r\n}\r\n\r\n"]}