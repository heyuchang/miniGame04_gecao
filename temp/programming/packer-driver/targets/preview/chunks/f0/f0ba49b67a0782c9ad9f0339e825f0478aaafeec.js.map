{"version":3,"sources":["file:///G:/cocos/%E6%9C%AB%E6%97%A5%E7%89%B9%E5%B7%A5%E9%98%9F/assets/scripts/tyqSDK/utils/weNetworkMgr.ts"],"names":["networkMgr","NetworkPackage","Http","errorNetCode","codes","_errorNetCode","encryptCode","str","_encryptCode","errorRestartGameCode","array","_errorRestartGameCode","successCode","code","_successCode","errorServerCode","_errorServerCode","encryptRule","_encryptRule","intervalTime","time","_intervalTime","overTime","_overTime","dealHeadListener","cb","_dealHeadListener","uid","_uid","constructor","mid","messageList","limitMessageNum","timer","token","isLock","lastMessage","xhrPost","_route","data","fail","isRepeat","msg","head","route","toString","body","netPackage","callback","failCallBack","startTimer","sendMessage","checkRespone","_respone","respone","jsdecrypt","message","succeedResponeBody","succeedResponeHead","clearTimer","deleteMessageListItem","checkNextMessage","checkErrorCode","index","length","errorCode","restartGame","resultStr","getErrorCodeMeaning","console","error","key","sendNum","_data","obj","JSON","parse","e","isCheck","Object","keys","errorNum","post","errStr","setInterval","checkPackage","bind","Date","now","clearInterval","onHttpError","tip","pack","setTimeout","_instance","NetworkMgr","lock","that"],"mappings":"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","sourcesContent":["// import { Notifications } from '../notifications';\r\n\r\nimport { Http } from \"./weHttp\";\r\n\r\nclass networkMgr {\r\n\t////////////////////////////\r\n\t// 类成员\r\n\t///////////////////////////\r\n\tpublic static readonly _instance = new networkMgr();\r\n\t/** 消息ID */\r\n\tprivate mid = 0;\r\n\t/** 消息队列 */\r\n\tprivate messageList: any = {};\r\n\t/** 每条消息最多的发送次数 */\r\n\tprivate limitMessageNum = 5;\r\n\t/** 时间 */\r\n\tprivate timer: number | null = null;\r\n\t/** token */\r\n\tprivate token = '';\r\n\t/** 消息锁: false, 可以正常发送消息，已上锁 */\r\n\tprivate isLock = false;\r\n\tprivate _dealHeadListener: Function | null = null;\r\n\t/** 加密规则 */\r\n\tprivate _encryptRule = ['mid:', 'uid:', 'key:', 'data:'];\r\n\t/** 加密code, 服务端客户端要统一 */\r\n\tprivate _encryptCode = 'zqkg';\r\n\t/** 计时时间: 1s */\r\n\tprivate _intervalTime = 3000;\r\n\t/** 服务器报错 */\r\n\tprivate _errorServerCode = 500;\r\n\t/** 成功回包code */\r\n\tprivate _successCode = 0;\r\n\t/** 重起游戏的错误码 */\r\n\tprivate _errorRestartGameCode = [102];\r\n\t/** 错误码列表 */\r\n\tprivate _errorNetCode: any = {};\r\n\t/** 超过时间 */\r\n\tprivate _overTime = 5000;\r\n\t/** uid */\r\n\tprivate _uid = 0;\r\n\r\n\tprivate lastMessage = null;\r\n\t////////////////////////////\r\n\t// get、set构造器\r\n\t///////////////////////////\r\n\tpublic set errorNetCode(codes: Object) {\r\n\t\tthis._errorNetCode = codes;\r\n\t}\r\n\r\n\tpublic set encryptCode(str: string) {\r\n\t\tthis._encryptCode = str;\r\n\t}\r\n\r\n\tpublic set errorRestartGameCode(array: Array<number>) {\r\n\t\tthis._errorRestartGameCode = array;\r\n\t}\r\n\r\n\tpublic set successCode(code: number) {\r\n\t\tthis._successCode = code;\r\n\t}\r\n\r\n\tpublic set errorServerCode(code: number) {\r\n\t\tthis._errorServerCode = code;\r\n\t}\r\n\r\n\tpublic set encryptRule(array: Array<string>) {\r\n\t\tthis._encryptRule = array;\r\n\t}\r\n\r\n\tpublic set intervalTime(time: number) {\r\n\t\tthis._intervalTime = time;\r\n\t}\r\n\r\n\tpublic set overTime(time: number) {\r\n\t\tthis._overTime = time;\r\n\t}\r\n\r\n\tpublic set dealHeadListener(cb: Function) {\r\n\t\tthis._dealHeadListener = cb;\r\n\t}\r\n\r\n\tpublic set uid(uid: number) {\r\n\t\tthis._uid = uid;\r\n\t}\r\n\t////////////////////////////\r\n\t// 接口\r\n\t///////////////////////////\r\n\tpublic constructor() {\r\n\t\tthis.mid = 0;\r\n\t\tthis.messageList = {};\r\n\t\tthis.timer = null;\r\n\t}\r\n\t/**\r\n\t * @description 发送xhr消息\r\n\t * @param {string} _route\r\n\t * @param {Object} data\r\n\t * @param {Function} cb\r\n\t * @param isRepeat 是否重复发送事件\r\n\t * @param fail 失败回调\r\n\t */\r\n\tpublic xhrPost(_route: string, data: Object, cb?: Function, fail?: Function, isRepeat = false) {\r\n\t\tthis.mid += 1;\r\n\t\t// 包\r\n\t\tlet msg = {\r\n\t\t\thead: {\r\n\t\t\t\troute: _route,\r\n\t\t\t\tmid: this.mid.toString(),\r\n\t\t\t\tuid: this._uid\r\n\t\t\t},\r\n\t\t\tbody: data\r\n\t\t};\r\n\t\t// 消息队列的数据结构\r\n\t\tlet netPackage = new NetworkPackage();\r\n\t\tnetPackage.route = _route;\r\n\t\tnetPackage.mid = this.mid;\r\n\t\tnetPackage.data = msg;\r\n\t\tif (cb) {\r\n\t\t\tnetPackage.callback = cb;\r\n\t\t}\r\n\t\tnetPackage.isRepeat = isRepeat;\r\n\t\tif (fail) {\r\n\t\t\tnetPackage.failCallBack = fail;\r\n\t\t}\r\n\t\tthis.messageList[this.mid] = netPackage;\r\n\t\t// 开始计时\r\n\t\tthis.startTimer();\r\n\t\tif (!this.isLock) {\r\n\t\t\tthis.sendMessage(this.mid);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @description 检查回包\r\n\t * @param _respone\r\n\t */\r\n\tpublic checkRespone(route: any, _respone: any, mid: any) {\r\n\t\t// 解密\r\n\t\tlet respone: any = this.jsdecrypt(_respone);\r\n\t\tlet data = respone;\r\n\t\t// if (respone.result) {\r\n\t\t// \tdata = this.jsdecrypt(respone.result);\r\n\t\t// }\r\n\t\t// respone = this.jsdecrypt(respone);\r\n\t\t// let head: any = respone.head;\r\n\t\t// let body: any = respone.body;\r\n\t\t// let code = head.code || 0;\r\n\t\t// let mid = 0;\r\n\t\t// 刷新token\r\n\t\t// this.token = head.token;\r\n\t\tlet message = this.messageList[mid];\r\n\t\t// 头部回包处理\r\n\t\t// this.succeedResponeHead(head);\r\n\t\t// 服务端回包，返回需要的数据\r\n\t\t// if (code === this._successCode) {\r\n\t\tthis.succeedResponeBody(message, data, mid);\r\n\t\t// 服务端回包中出现错误码\r\n\t\t// } else {\r\n\t\t// this.checkErrorCode(code, mid);\r\n\t\t// }\r\n\t}\r\n\r\n\tprivate succeedResponeHead(head: any) {\r\n\t\tif (this._dealHeadListener)\r\n\t\t\tthis._dealHeadListener(head);\r\n\t}\r\n\t////////////////////////////\r\n\t// 业务逻辑\r\n\t///////////////////////////\r\n\t/**\r\n\t * @description 没有错误信息，把服务端数据发送到业务逻辑层\r\n\t * @param message\r\n\t * @param body\r\n\t * @param mid\r\n\t */\r\n\tprivate succeedResponeBody(message: any, body: any, mid: number) {\r\n\t\tthis.isLock = false;\r\n\t\tthis.clearTimer();\r\n\t\tthis.deleteMessageListItem(mid, false);\r\n\t\tthis.checkNextMessage();\r\n\t\tif (message && message.callback) {\r\n\t\t\tmessage.callback(body);\r\n\t\t}\r\n\t}\r\n\t/**\r\n\t * @description 网络消息code检查\r\n\t * @param code 错误码；需要和服务端协定\r\n\t * @param mid\r\n\t */\r\n\tprivate checkErrorCode(code: number, mid: number) {\r\n\t\t// 收到消息500 则继续重发直到发送次数限制.\r\n\t\tif (code !== this._errorServerCode) {\r\n\t\t\tthis.deleteMessageListItem(mid, true);\r\n\t\t}\r\n\t\t// 重启游戏\r\n\t\tfor (let index = 0; index < this._errorRestartGameCode.length; index++) {\r\n\t\t\tlet errorCode = this._errorRestartGameCode[index];\r\n\t\t\tif (code === errorCode) {\r\n\t\t\t\tthis.restartGame();\r\n\t\t\t}\r\n\t\t}\r\n\t\tlet resultStr = this.getErrorCodeMeaning(code);\r\n\t\tconsole.error(\"----> 返回错误, code:\", code, resultStr);\r\n\t\t// TODO: 把错误码信息返回给业务逻辑\r\n\t\t// Notifications.emit('sys_http_error', { code: code, mid: mid });\r\n\t}\r\n\r\n\tprivate checkNextMessage() {\r\n\t\tfor (let key in this.messageList) {\r\n\t\t\tlet message = this.messageList[key];\r\n\t\t\tif (message.sendNum === 0) {\r\n\t\t\t\tthis.sendMessage(message.mid);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @description 删除消息队列中的元素\r\n\t * @param mid\r\n\t * @param fail 是否是失败\r\n\t */\r\n\tprivate deleteMessageListItem(mid: number, fail: boolean) {\r\n\t\tif (this.messageList && this.messageList[mid]) {\r\n\t\t\tif (this.messageList[mid].failCallBack && fail) {\r\n\t\t\t\tthis.messageList[mid].failCallBack();\r\n\t\t\t}\r\n\t\t\tdelete this.messageList[mid];\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @description 数据加密（需要和服务端约定）\r\n\t * @param data\r\n\t//  */\r\n\t// private jsencrypt(data: any) {\r\n\t// \t// let head = data.head;\r\n\t// \t// let body = JSON.stringify(data.body);\r\n\t// \t// let encryptData = `${this._encryptRule[0]}${head.mid}&${this._encryptRule[1]}${head.uid}&${this._encryptRule[2]}${this._encryptCode}&${this._encryptRule[3]}${body}`;\r\n\t// \t// data.head.mi = Sha1.hex_hmac_sha1(this._encryptCode, encryptData).slice(5);\r\n\t// \treturn data;\r\n\t// }\r\n\r\n\t/**\r\n\t * @description 解密\r\n\t * @param _data\r\n\t */\r\n\tprivate jsdecrypt(_data: any) {\r\n\t\tlet obj = null;\r\n\t\tif (typeof _data == 'string') {\r\n\t\t\ttry {\r\n\t\t\t\tobj = JSON.parse(_data);\r\n\t\t\t} catch (e) {\r\n\t\t\t}\r\n\t\t}\r\n\t\t// if (obj.result && obj) {\r\n\t\t// \tobj.result = window.DES3.decrypt(global.DES3_KEY, obj.result);\r\n\t\t// }\r\n\t\treturn obj;\r\n\t}\r\n\r\n\t/**\r\n\t * @description 发送消息队列\r\n\t * @param {number} mid\r\n\t * @param {number} isCheck 是否检查包的发送次数是否超过上限\r\n\t */\r\n\tprivate sendMessage(mid: number, isCheck: boolean = true) {\r\n\t\t// 消息队列为空\r\n\t\tif (Object.keys(this.messageList).length === 0) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tlet message = this.messageList[mid];\r\n\t\t// 一条消息的发送次数大于限制次数，建议重启游戏\r\n\t\tif (isCheck && message.sendNum >= this.limitMessageNum\r\n\t\t\t|| !isCheck && message.errorNum >= this.limitMessageNum) {\r\n\t\t\tconsole.error(message.data.head.route, 'message send too much times');\r\n\t\t\tthis.deleteMessageListItem(mid, false);\r\n\t\t\t// Notifications.emit('sys_http_try_too_many_time');\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tmessage.sendNum += 1;\r\n\t\tlet data = message.data;\r\n\t\tlet route = data.head.route;\r\n\t\tdata.head.token = this.token;\r\n\t\t// 加密\r\n\t\tthis.lastMessage = message;\r\n\t\tHttp.post(route, data.body, mid);\r\n\t}\r\n\r\n\t/**\r\n\t * @description 获取错误码对应的意思\r\n\t * @param code\r\n\t */\r\n\tprivate getErrorCodeMeaning(code: number) {\r\n\t\tlet errStr = this._errorNetCode[code];\r\n\t\tlet resultStr = errStr;\r\n\t\tif (!errStr) {\r\n\t\t\tresultStr = `服务器错误码： ${code}`;\r\n\t\t}\r\n\t\treturn resultStr;\r\n\t}\r\n\r\n\t/**\r\n\t * @description 重起游戏\r\n\t */\r\n\tprivate restartGame() {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @description 开始定时器\r\n\t */\r\n\tprivate startTimer() {\r\n\t\tif (!this.timer) {\r\n\t\t\tthis.timer = setInterval(this.checkPackage.bind(this), this._intervalTime);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @description 检查发包\r\n\t */\r\n\tprivate checkPackage() {\r\n\t\tif (Object.keys(this.messageList).length !== 0) {\r\n\t\t\tfor (let key in this.messageList) {\r\n\t\t\t\tlet message = this.messageList[key];\r\n\t\t\t\tlet time = Date.now();\r\n\t\t\t\tif (time - message.time > this._overTime && message.isRepeat) {\r\n\t\t\t\t\tlet mid = message.mid;\r\n\t\t\t\t\tthis.sendMessage(mid);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.deleteMessageListItem(message.mid, false);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tthis.clearTimer();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @description 清理定时器\r\n\t */\r\n\tprivate clearTimer() {\r\n\t\tif (this.timer) {\r\n\t\t\tclearInterval(this.timer);\r\n\t\t\tthis.timer = 0;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * http请求err处理\r\n\t * @param mid 消息id\r\n\t * @param error 错误内容\r\n\t * @param tip 错误提示文本\r\n\t */\r\n\tpublic onHttpError(mid: any, error?: any, tip?: string): void {\r\n\t\tif (tip)\r\n\t\t\tconsole.error(\"----> onHttpError\", tip, error);\r\n\t\telse\r\n\t\t\tconsole.error(\"----> onHttpError\", error);\r\n\r\n\t\tlet pack: NetworkPackage = this.messageList[mid];\r\n\t\tif (pack) {\r\n\t\t\t//如果需要重复\r\n\t\t\tif (pack.isRepeat) {\r\n\t\t\t\tsetTimeout(() => {\r\n\t\t\t\t\tpack.errorNum++\r\n\t\t\t\t\tthis.sendMessage(mid, false);\r\n\t\t\t\t}, 3000);\r\n\t\t\t} else {\r\n\t\t\t\tthis.deleteMessageListItem(mid, true);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n}\r\n\r\nexport const NetworkMgr = networkMgr._instance;\r\n\r\n/**\r\n * NetworkPackage\r\n * 网络包\r\n */\r\n\r\n// main\r\nexport default class NetworkPackage {\r\n\tpublic route: string = '';\r\n\tpublic lock: boolean = false;\r\n\tpublic mid: number = 0;\r\n\tpublic data: any = null;\r\n\t/**接口成功回调 */\r\n\tpublic callback: Function | null = null;\r\n\t/**接口失败回调 */\r\n\tpublic failCallBack: Function | null = null;\r\n\r\n\tpublic time: number = 0;\r\n\tpublic sendNum: number = 0;\r\n\tpublic errorNum: number = 0;\r\n\t/**是否重复调用 */\r\n\tpublic isRepeat: boolean = false;\r\n\r\n\tpublic constructor(msg?: any) {\r\n\t\tthis.time = Date.now();\r\n\r\n\t\tfor (let key in msg) {\r\n\t\t\tlet that = this as any\r\n\t\t\tthat[key] = msg[key];\r\n\t\t}\r\n\t}\r\n};\r\n"]}