{"version":3,"sources":["file:///G:/cocos/%E6%9C%AB%E6%97%A5%E7%89%B9%E5%B7%A5%E9%98%9F/assets/scripts/game/manager/GParam.ts"],"names":["GParam","MapWrap","constructor","msg","arguments","_onlyArgument","push","key","val","set","get","clear","toList","size","values","toString","keys","str","index","length"],"mappings":";;;uCAEqBA,M;;;;;;;;;;;;;;AAFZC,MAAAA,O,iBAAAA,O;;;;;;;yBAEYD,M,GAAN,MAAMA,MAAN,CAAc;AAIzBE,QAAAA,WAAW,CAACC,GAAD,EAAY;AAAA,eAHfC,SAGe,GAHuB;AAAA;AAAA,mCAGvB;AAAA,eADfC,aACe;AACnB,eAAKA,aAAL,GAAqBF,GAArB;AACH;;AAEMG,QAAAA,IAAI,CAACC,GAAD,EAAcC,GAAd,EAA2B;AAClC,cAAG,CAACD,GAAJ,EAAS;AACT,eAAKH,SAAL,CAAeK,GAAf,CAAmBF,GAAnB,EAAwBC,GAAxB;AACH;AAED;AACJ;AACA;AACA;;;AACWE,QAAAA,GAAG,CAAIH,GAAJ,EAAsB;AAC5B,cAAG,CAACA,GAAJ,EAAS,OAAO,KAAKF,aAAZ;AACT,iBAAO,KAAKD,SAAL,CAAeM,GAAf,CAAmBH,GAAnB,CAAP;AACH;AAED;AACJ;AACA;;;AACWI,QAAAA,KAAK,GAAU;AAClB,eAAKP,SAAL,CAAeO,KAAf;AACH;AAED;AACJ;AACA;;;AACWC,QAAAA,MAAM,GAAc;AACvB,cAAG,KAAKR,SAAL,CAAeS,IAAf,IAAuB,CAA1B,EAA6B,OAAO,IAAP;AAC7B,iBAAO,KAAKT,SAAL,CAAeU,MAAf,EAAP;AACH;AACD;AACJ;AACA;;;AACWC,QAAAA,QAAQ,GAAY;AACvB,cAAIC,IAAI,GAAG,KAAKZ,SAAL,CAAeY,IAAf,EAAX;AACA,cAAIC,GAAG,GAAG,EAAV;;AACA,eAAI,IAAIC,KAAK,GAAG,CAAhB,EAAmBA,KAAK,GAAGF,IAAI,CAACG,MAAhC,EAAwCD,KAAK,EAA7C,EAAiD;AAC7CD,YAAAA,GAAG,IAAID,IAAI,CAACE,KAAD,CAAJ,GAAc,GAAd,GAAoB,KAAKR,GAAL,CAASM,IAAI,CAACE,KAAD,CAAb,CAApB,GAA4C,IAAnD;AACH;;AACD,iBAAOD,GAAP;AACH;;AA9CwB,O","sourcesContent":["import { MapWrap } from \"./MapWrap\";\r\n\r\nexport default class GParam  {\r\n    private arguments : MapWrap<string, Object> = new MapWrap<string, Object>();\r\n\r\n    private _onlyArgument;\r\n    constructor(msg?: any) {\r\n        this._onlyArgument = msg;\r\n    }\r\n\r\n    public push(key: string, val: Object) {\r\n        if(!key) return;\r\n        this.arguments.set(key, val);\r\n    }\r\n\r\n    /**\r\n     * 获取参数\r\n     * @param key 参数Key\r\n     */\r\n    public get<T>(key?: string) : T {\r\n        if(!key) return this._onlyArgument as T;\r\n        return this.arguments.get(key) as T;\r\n    }\r\n\r\n    /**\r\n     * 清理\r\n     */\r\n    public clear() : void {\r\n        this.arguments.clear();\r\n    }\r\n\r\n    /**\r\n     * 将参数转成Array\r\n     */\r\n    public toList() : Object[] {\r\n        if(this.arguments.size == 0) return null;\r\n        return this.arguments.values();\r\n    }\r\n    /**\r\n     * ToString实现\r\n     */\r\n    public toString() : string {\r\n        let keys = this.arguments.keys();\r\n        var str = '';\r\n        for(let index = 0; index < keys.length; index++) {\r\n            str += keys[index] + \"=\" + this.get(keys[index]) + \"/t\";\r\n        }\r\n        return str;\r\n    }\r\n}"]}