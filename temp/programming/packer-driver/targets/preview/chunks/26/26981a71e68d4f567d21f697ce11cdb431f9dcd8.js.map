{"version":3,"sources":["file:///G:/cocos/%E6%9C%AB%E6%97%A5%E7%89%B9%E5%B7%A5%E9%98%9F/assets/scripts/game/compoment/item/Player.ts"],"names":["Collider2D","Color","Contact2DType","macro","v3","_decorator","cocosUtil","utilTools","constants","msgac","designManager","eventManager","mapModel","playerModel","physicsGroup","AnimationCtrl","BaseLayer","ShineColor","Monster","ccclass","property","Player","moveSpeed","hp","hpMax","hpMaxOrign","atk","bodyNode","effectAnimationCtrl","lightShine","collider","animationCtrl","shineColor","hpProgress","movePos","outVec3","monsterArr","wallCollider","onLoad","getComponent","getNodeByPath","addComponent","node","active","on","BEGIN_CONTACT","contactBegin","END_CONTACT","contactEnd","config","roleSpeed","setRoleSkin","onEnable","addEventArr","joystick","onDestroy","initData","data","initUI","enabled","refreshHpLayer","getSaveData","pos","position","loadSaveData","addHpMaxPercent","p","lastHpMax","nowHpMax","Math","round","addHp","addHpPercent","playAnimation","val","num","ceil","numSystem","addNum","convertToWorldSpace","GREEN","RED","setProgressBar","useSkillHeal","percent","backLife","animations","walk","scheduleOnce","mapLayer","gameFightResume","onSkillSelect","hitWithDam","dam","skillSystem","getSkill2DamSubPercent","startShine","materials","shineColorSpine","skillLifeNum","send","mapRefreshSkill","die","popLayer","layers","BackLifeLayer","addMonster","tag","monster","index","indexOf","isPauseMove","push","removeMonster","splice","selfCollider","otherCollider","group","MONSTER","parent","contactBeginPlayer","WALL","touchWall","unschedule","schedule","REPEAT_FOREVER","isValid","contactEndPlayer","joystickRet","type","stopMove","standBy","getMoveSpeed","getSkill2PlayerSpeedAddPercent","move","dt","nowPos","getPosition","dis","clone","multiplyScalar","add","setPosition","mapSystem","adjustInWall","scale","getScale","x","setScale","abs","y","refreshMapFightWindow","length","forArr","playerForceMove","setString","playerPosNode","floor","update"],"mappings":"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","sourcesContent":["import { Collider2D, Color, Contact2DType, macro, Node, v3, Vec3, _decorator } from 'cc';\r\nimport { cocosUtil } from '../../../utils/cocosUtil';\r\nimport { utilTools } from '../../../utils/utilTools';\r\nimport { constants } from '../../data/constants';\r\nimport { msgac } from '../../data/msgac';\r\nimport { designManager } from '../../manager/designManager';\r\nimport { eventManager } from '../../manager/eventManager';\r\nimport { mapModel } from '../../model/mapModel';\r\nimport { playerModel } from '../../model/playerModel';\r\nimport { physicsGroup } from '../../other/physicsGroup';\r\nimport { AnimationCtrl } from '../base/AnimationCtrl';\r\nimport { BaseLayer } from '../base/BaseLayer';\r\nimport { ShineColor } from '../shader/ShineColor';\r\nimport { JoystickData } from './GameCtrl';\r\nimport { Monster } from './monsters/Monster';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('Player')\r\nexport class Player extends BaseLayer {\r\n\r\n    moveSpeed: number = 350;\r\n    hp: number = 100;\r\n    hpMax: number = 100;\r\n    hpMaxOrign: number = 100;\r\n    atk: number = 0;\r\n\r\n    bodyNode: Node;\r\n    effectAnimationCtrl: AnimationCtrl;\r\n    lightShine: boolean = false;\r\n    collider: Collider2D;\r\n    animationCtrl: AnimationCtrl;\r\n    shineColor: ShineColor;\r\n    hpProgress: Node;\r\n\r\n    movePos: Vec3;\r\n    outVec3: Vec3 = v3(0, 0, 0);\r\n\r\n    // 存储碰撞中的怪物对象数组\r\n    monsterArr: any[] = [];\r\n\r\n    // 围栏碰撞器\r\n    wallCollider: any;\r\n\r\n    onLoad() {\r\n        super.onLoad();\r\n\r\n        this.collider = this.getComponent(Collider2D);\r\n\r\n        this.bodyNode = this.getNodeByPath(\"body\");\r\n        this.hpProgress = this.getNodeByPath(\"hpProgress\");\r\n        this.animationCtrl = this.bodyNode.addComponent(AnimationCtrl);\r\n        this.shineColor = this.bodyNode.addComponent(ShineColor);\r\n        this.effectAnimationCtrl = this.getNodeByPath(\"body/effect\").addComponent(AnimationCtrl);\r\n        this.effectAnimationCtrl.node.active = false;\r\n\r\n        this.collider.on(Contact2DType.BEGIN_CONTACT, this.contactBegin, this);\r\n        this.collider.on(Contact2DType.END_CONTACT, this.contactEnd, this);\r\n\r\n        this.moveSpeed = designManager.config.roleSpeed;\r\n\r\n        this.setRoleSkin(this.bodyNode);\r\n    }\r\n\r\n    onEnable() {\r\n        super.onEnable();\r\n\r\n        this.addEventArr([\r\n            msgac.joystick,\r\n        ]);\r\n\r\n    }\r\n\r\n    onDestroy() {\r\n\r\n    }\r\n\r\n    initData(data: any) {\r\n        this.hp = data.hp;\r\n        this.hpMax = this.hp;\r\n        this.hpMaxOrign = this.hp;\r\n        this.atk = data.atk;\r\n\r\n        this.initUI();\r\n    }\r\n\r\n    initUI() {\r\n        this.collider.enabled = true;\r\n        this.refreshHpLayer();\r\n    }\r\n\r\n    getSaveData() {\r\n        let data: any = {};\r\n        data.moveSpeed = this.moveSpeed;\r\n        data.hp = this.hp;\r\n        data.hpMax = this.hpMax;\r\n        data.hpMaxOrign = this.hpMaxOrign;\r\n        data.atk = this.atk;\r\n        data.pos = this.node.position;\r\n\r\n        return data;\r\n    }\r\n\r\n    loadSaveData(data: any) {\r\n        this.moveSpeed = data.moveSpeed;\r\n        this.hp = data.hp;\r\n        this.hpMax = data.hpMax;\r\n        this.hpMaxOrign = data.hpMaxOrign;\r\n        this.atk = data.atk;\r\n        this.node.position = data.pos;\r\n\r\n        this.refreshHpLayer();\r\n    }\r\n\r\n    // 提高生命上限百分比\r\n    addHpMaxPercent(p: number) {\r\n        let lastHpMax = this.hpMax;\r\n        let nowHpMax = this.hpMaxOrign * (1 + p);\r\n        nowHpMax = Math.round(nowHpMax);\r\n        let addHp = nowHpMax - lastHpMax;\r\n        this.hpMax = nowHpMax;\r\n        this.addHp(addHp);\r\n    }\r\n\r\n    // 增加血量百分比\r\n    addHpPercent(p: number) {\r\n        this.effectAnimationCtrl.node.active = true;\r\n        this.effectAnimationCtrl.playAnimation(\"zhiliao\", false, () => {\r\n            this.effectAnimationCtrl.node.active = false;\r\n        });\r\n        let val = this.hpMax * p;\r\n        this.addHp(val);\r\n    }\r\n    addHp(num: number) {\r\n        if (this.hp <= 0) {\r\n            // 已阵亡\r\n            return;\r\n        }\r\n        num = Math.ceil(num);\r\n\r\n        this.hp += num;\r\n\r\n        if (num > 0) {\r\n            // 回复血量\r\n            mapModel.numSystem.addNum(num, cocosUtil.convertToWorldSpace(this.node), Color.GREEN);\r\n        } else {\r\n            // 伤害数字\r\n            mapModel.numSystem.addNum(num, cocosUtil.convertToWorldSpace(this.node), Color.RED);\r\n        }\r\n        if (this.hp > this.hpMax) {\r\n            this.hp = this.hpMax;\r\n        }\r\n        if (this.hp < 0) {\r\n            this.hp = 0;\r\n        }\r\n        this.refreshHpLayer();\r\n    }\r\n\r\n    refreshHpLayer() {\r\n        this.setProgressBar(this.hpProgress, this.hp / this.hpMax);\r\n    }\r\n\r\n    useSkillHeal(percent: number) {\r\n        this.addHpPercent(percent);\r\n    }\r\n\r\n    backLife() {\r\n        this.hp = this.hpMax;\r\n        this.animationCtrl.playAnimation(constants.animations.walk, true);\r\n        this.effectAnimationCtrl.node.active = true;\r\n        this.effectAnimationCtrl.playAnimation(\"hudun\", true);\r\n        this.lightShine = true;\r\n        this.scheduleOnce(() => {\r\n            this.effectAnimationCtrl.node.active = false;\r\n            this.lightShine = false;\r\n        }, 3);\r\n        this.refreshHpLayer();\r\n        mapModel.mapLayer.gameFightResume();\r\n        mapModel.mapLayer.onSkillSelect();\r\n    }\r\n\r\n    hitWithDam(dam: number, shineColor?: Color) {\r\n        if (dam <= 0 || this.hp <= 0) {\r\n            return;\r\n        }\r\n        if (this.lightShine) {\r\n            // 无敌状态\r\n            return;\r\n        }\r\n\r\n        dam = dam * (1 - mapModel.skillSystem.getSkill2DamSubPercent());\r\n        dam = Math.ceil(dam);\r\n        this.addHp(-dam);\r\n        // 闪白\r\n        this.shineColor.startShine(constants.materials.shineColorSpine, shineColor);\r\n\r\n        if (this.hp <= 0) {\r\n            if (playerModel.skillLifeNum > 0) {\r\n                // 自动复活\r\n                playerModel.skillLifeNum--;\r\n                this.backLife();\r\n                eventManager.send(msgac.mapRefreshSkill);\r\n                return;\r\n            }\r\n            this.collider.enabled = false;\r\n            this.animationCtrl.playAnimation(constants.animations.die, false, () => {\r\n                // 弹出复活界面\r\n                mapModel.mapLayer.popLayer(constants.layers.BackLifeLayer);\r\n            });\r\n        }\r\n    }\r\n\r\n    addMonster(collider: Collider2D) {\r\n        if (collider.tag != 0) {\r\n            return;\r\n        }\r\n        let monster = collider.getComponent(Monster);\r\n        let index = this.monsterArr.indexOf(monster);\r\n        if (index == -1) {\r\n            monster.isPauseMove = true;\r\n            this.monsterArr.push(monster);\r\n        }\r\n    }\r\n\r\n    removeMonster(collider: Collider2D) {\r\n        if (collider.tag != 0) {\r\n            return;\r\n        }\r\n        let monster = collider.getComponent(Monster);\r\n        let index = this.monsterArr.indexOf(monster);\r\n        if (index != -1) {\r\n            monster.isPauseMove = false;\r\n            this.monsterArr.splice(index, 1);\r\n        }\r\n    }\r\n\r\n    contactBegin(selfCollider: Collider2D, otherCollider: Collider2D) {\r\n        if (otherCollider.group == physicsGroup.MONSTER) {\r\n            let monster = otherCollider.getComponent(Monster);\r\n            if (!monster) {\r\n                monster = otherCollider.node.parent.getComponent(Monster);\r\n            }\r\n            this.addMonster(otherCollider);\r\n            monster.contactBeginPlayer();\r\n            return;\r\n        }\r\n        if (otherCollider.group == physicsGroup.WALL) {\r\n            this.touchWall();\r\n            this.unschedule(this.touchWall);\r\n            this.wallCollider = otherCollider;\r\n            this.schedule(this.touchWall, 0.5, macro.REPEAT_FOREVER, 0);\r\n            return;\r\n        }\r\n    }\r\n\r\n    contactEnd(selfCollider: Collider2D, otherCollider: Collider2D) {\r\n        if (!cocosUtil.isValid(otherCollider)) {\r\n            return;\r\n        }\r\n        if (otherCollider.group == physicsGroup.MONSTER) {\r\n            let monster = otherCollider.getComponent(Monster);\r\n            if (!monster) {\r\n                monster = otherCollider.node.parent.getComponent(Monster);\r\n            }\r\n            this.removeMonster(otherCollider);\r\n            monster.contactEndPlayer();\r\n            return;\r\n        }\r\n        if (otherCollider.group == physicsGroup.WALL) {\r\n            if (this.wallCollider == otherCollider) {\r\n                this.unschedule(this.touchWall);\r\n            }\r\n            return;\r\n        }\r\n    }\r\n\r\n    touchWall() {\r\n        let dam = this.hpMax * 0.05;\r\n        dam = Math.ceil(dam);\r\n        this.hitWithDam(dam);\r\n    }\r\n\r\n    joystickRet(data: JoystickData) {\r\n        if (data.type == \"start\") {\r\n            if (this.hp <= 0) {\r\n                return;\r\n            }\r\n            this.animationCtrl.playAnimation(constants.animations.walk, true);\r\n            return;\r\n        }\r\n        if (data.type == \"move\") {\r\n            this.movePos = data.pos;\r\n            return;\r\n        }\r\n\r\n        if (data.type == \"end\") {\r\n            this.stopMove();\r\n        }\r\n    }\r\n\r\n    stopMove() {\r\n        this.movePos = null;\r\n        if (this.hp > 0) {\r\n            this.animationCtrl.playAnimation(constants.animations.standBy, true);\r\n        }\r\n    }\r\n\r\n    getMoveSpeed() {\r\n        return this.moveSpeed * (1 + mapModel.skillSystem.getSkill2PlayerSpeedAddPercent());\r\n    }\r\n\r\n    move(dt: number) {\r\n        if (!this.movePos || this.hp <= 0) {\r\n            return;\r\n        }\r\n        let nowPos = this.node.getPosition(this.outVec3);\r\n        let dis = this.getMoveSpeed() * dt;\r\n        let movePos = this.movePos.clone().multiplyScalar(dis);\r\n        nowPos.add(movePos);\r\n        this.node.setPosition(nowPos);\r\n        mapModel.mapSystem.adjustInWall(this.node);\r\n\r\n        let scale = this.bodyNode.getScale();\r\n        if (movePos.x >= 0) {\r\n            // 向右\r\n            this.bodyNode.setScale(-Math.abs(scale.x), scale.y);\r\n        } else {\r\n            // 向左\r\n            this.bodyNode.setScale(Math.abs(scale.x), scale.y);\r\n        }\r\n\r\n        mapModel.mapSystem.refreshMapFightWindow();\r\n\r\n        if (this.monsterArr.length > 0) {\r\n            // 模拟推开怪物\r\n            utilTools.forArr(this.monsterArr, (monster: Monster) => {\r\n                monster.playerForceMove(movePos.clone());\r\n            });\r\n        }\r\n\r\n        this.setString(mapModel.mapLayer.playerPosNode, Math.floor(nowPos.x) + \",\" + Math.floor(nowPos.y));\r\n    }\r\n\r\n    update(dt: number) {\r\n        this.move(dt);\r\n    }\r\n\r\n}\r\n\r\n"]}