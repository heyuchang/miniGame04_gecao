{"version":3,"sources":["file:///G:/cocos/%E6%9C%AB%E6%97%A5%E7%89%B9%E5%B7%A5%E9%98%9F/assets/scripts/game/compoment/layer/BoxMonsterLayer.ts"],"names":["Button","Color","find","_decorator","sdkManager","cocosUtil","utilTools","constants","localText","designManager","mapModel","BaseLayer","ccclass","property","BoxMonsterLayer","getIndexs","canRefresh","refreshCount","onLoad","onEnable","onDisable","onDestroy","initUI","itemUIArr","getNodeByPath","children","arr","getItemArr","forEach","node","index","item","refreshSelectItem","refreshBtnsLayer","btnRefresh","getComponent","enabled","config","carTime","setRenderableColor","WHITE","colors","yin","parseColor","limitNode","setString","format","refreshSelectLayer","itemUI","skillItem","propItem","active","name","tableName","prop","row","getRowById","id","info","propIds","coin","diamond","propGet","num","getFirstIdByType","type","setSpriteFrame","icon","starLayer","setNumItemLayer","lv","starNode","iconNode","icon2Node","design","maxLv","mapSystem","getSelectItemArr","getFloatValue","carGoldNum","push","carGold","carDiamond","addHpPercent","closeLayer","layerCb","onClickBtnRefresh","openAd","st","onClickBtnGetAd","parent","weapon","weaponSystem","addWeapon","skill","skillSystem","addSkill","skill2","addSkill2","propSystem","getProp","onClickBtnGet"],"mappings":"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","sourcesContent":["import { Button, Color, find, Node, _decorator } from 'cc';\r\nimport { sdkManager } from '../../../sdk/sdkManager';\r\nimport { cocosUtil } from '../../../utils/cocosUtil';\r\nimport { utilTools } from '../../../utils/utilTools';\r\nimport { constants } from '../../data/constants';\r\nimport { localText } from '../../data/localText';\r\nimport { designManager } from '../../manager/designManager';\r\nimport { mapModel } from '../../model/mapModel';\r\nimport { BaseLayer } from '../base/BaseLayer';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('BoxMonsterLayer')\r\nexport class BoxMonsterLayer extends BaseLayer {\r\n\r\n    getIndexs: any = {};\r\n    canRefresh: boolean = true;\r\n    refreshCount: number = 0;\r\n\r\n    onLoad() {\r\n        super.onLoad();\r\n    }\r\n\r\n    onEnable() {\r\n        super.onEnable();\r\n    }\r\n\r\n    onDisable() {\r\n        super.onDisable();\r\n    }\r\n\r\n    onDestroy() {\r\n        super.onDestroy();\r\n    }\r\n\r\n    initUI() {\r\n        let itemUIArr = this.getNodeByPath(\"ui/bg/itemLayer\").children;\r\n        let arr = this.getItemArr();\r\n\r\n        itemUIArr.forEach((node: any, index: number) => {\r\n            let item = arr[index];\r\n            node.item = item;\r\n            node.index = index;\r\n            this.refreshSelectItem(node, item, index);\r\n        });\r\n\r\n        this.refreshBtnsLayer();\r\n    }\r\n\r\n    refreshBtnsLayer() {\r\n        let btnRefresh = this.getNodeByPath(\"ui/bg/btnRefresh\");\r\n        btnRefresh.getComponent(Button).enabled = true;\r\n        if (this.canRefresh && this.refreshCount < designManager.config.carTime) {\r\n            cocosUtil.setRenderableColor(btnRefresh, Color.WHITE, true);\r\n        } else {\r\n            cocosUtil.setRenderableColor(btnRefresh, constants.colors.yin.parseColor(), true);\r\n            btnRefresh.getComponent(Button).enabled = false;\r\n        }\r\n\r\n        let limitNode = this.getNodeByPath(\"ui/bg/btnRefresh/limit\");\r\n        this.setString(limitNode, \"(%d/%d)\".format(this.refreshCount, designManager.config.carTime));\r\n    }\r\n\r\n    refreshSelectLayer() {\r\n        let itemUIArr = this.getNodeByPath(\"ui/bg/itemLayer\").children;\r\n        itemUIArr.forEach((node: any, index: number) => {\r\n            this.refreshSelectItem(node, node.item, node.index);\r\n        });\r\n    }\r\n\r\n    refreshSelectItem(itemUI: Node, item: any, index: number) {\r\n        let skillItem = find(\"skillItem\", itemUI);\r\n        let propItem = find(\"propItem\", itemUI);\r\n        if (skillItem) {\r\n            skillItem.active = false;\r\n        }\r\n        propItem.active = false;\r\n\r\n        find(\"hasGet\", itemUI).active = this.getIndexs[index] ? true : false;\r\n\r\n        if (item.name == constants.tableName.prop) {\r\n            propItem.active = true;\r\n            let row = designManager.getRowById(constants.tableName.prop, item.id);\r\n            let info = row.info;\r\n            if (item.id == constants.propIds.coin || item.id == constants.propIds.diamond) {\r\n                info = localText.propGet.format(item.num, row.name);\r\n            }\r\n            this.setString(find(\"info\", propItem), info);\r\n        } else {\r\n            skillItem.active = true;\r\n            let info = item.info;\r\n            let id = designManager.getFirstIdByType(item.type);\r\n            if (info) {\r\n                id = info.id + 1;\r\n            }\r\n            let row = designManager.getRowById(item.name, id);\r\n\r\n            this.setSpriteFrame(find(\"icon\", skillItem), row.icon);\r\n\r\n            let starLayer = find(\"starLayer\", skillItem);\r\n            this.setNumItemLayer(starLayer, row.lv, (starNode: Node) => {\r\n                let iconNode = find(\"icon\", starNode);\r\n                let icon2Node = find(\"icon2\", starNode);\r\n                if (row.lv >= constants.design.maxLv) {\r\n                    iconNode.active = false;\r\n                    icon2Node.active = true;\r\n                } else {\r\n                    iconNode.active = true;\r\n                    icon2Node.active = false;\r\n                }\r\n            });\r\n        }\r\n\r\n    }\r\n\r\n    getItemArr() {\r\n        let arr = mapModel.mapSystem.getSelectItemArr();\r\n        arr.forEach((item: any) => {\r\n            if (item.name == constants.tableName.prop) {\r\n                // 随机金币\r\n                item.id = constants.propIds.coin\r\n                item.num = utilTools.getFloatValue(designManager.config.carGoldNum[0], designManager.config.carGoldNum[1], true);\r\n            }\r\n        });\r\n\r\n        // 金币\r\n        arr.push({\r\n            name: constants.tableName.prop,\r\n            id: constants.propIds.coin,\r\n            num: designManager.config.carGold\r\n        });\r\n        // 钻石\r\n        arr.push({\r\n            name: constants.tableName.prop,\r\n            id: constants.propIds.diamond,\r\n            num: designManager.config.carDiamond\r\n        });\r\n        // 回血\r\n        arr.push({\r\n            name: constants.tableName.prop,\r\n            id: constants.propIds.addHpPercent\r\n        });\r\n\r\n        return arr;\r\n\r\n    }\r\n\r\n    closeLayer() {\r\n        super.closeLayer();\r\n        if (this.layerCb) {\r\n            this.layerCb();\r\n        }\r\n    }\r\n\r\n    onClickBtnRefresh() {\r\n        sdkManager.openAd(\"宝箱怪换一批\", (st: number) => {\r\n            if (st == 1) {\r\n                this.refreshCount++;\r\n                this.initUI();\r\n            }\r\n        });\r\n    }\r\n\r\n    onClickBtnGetAd(node: any) {\r\n        sdkManager.openAd(\"宝箱怪奖励\", (st: number) => {\r\n            if (st == 1) {\r\n                let item = node.parent.item;\r\n                switch (item.name) {\r\n                    case constants.tableName.weapon:\r\n                        mapModel.weaponSystem.addWeapon(item.type);\r\n                        break;\r\n                    case constants.tableName.skill:\r\n                        mapModel.skillSystem.addSkill(item.type);\r\n                        break;\r\n                    case constants.tableName.skill2:\r\n                        mapModel.skillSystem.addSkill2(item.type);\r\n                        break;\r\n                    case constants.tableName.prop:\r\n                        mapModel.propSystem.getProp(item.id, item.num);\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n                this.canRefresh = false;\r\n                let index = node.parent.index;\r\n                this.getIndexs[index] = 1;\r\n                this.refreshSelectLayer();\r\n                this.refreshBtnsLayer();\r\n            }\r\n        });\r\n    }\r\n\r\n    onClickBtnGet(node: any) {\r\n        let item = node.parent.parent.item;\r\n        let index = node.parent.parent.index;\r\n        mapModel.propSystem.getProp(item.id, item.num);\r\n        this.getIndexs[index] = 1;\r\n        this.refreshSelectLayer();\r\n    }\r\n\r\n}\r\n\r\n"]}