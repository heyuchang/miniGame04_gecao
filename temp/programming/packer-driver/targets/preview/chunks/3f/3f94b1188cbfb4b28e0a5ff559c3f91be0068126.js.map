{"version":3,"sources":["file:///G:/cocos/%E6%9C%AB%E6%97%A5%E7%89%B9%E5%B7%A5%E9%98%9F/assets/scripts/game/compoment/layer/SettingLayer.ts"],"names":["_decorator","Node","Toggle","audioManager","BaseUILayer","ccclass","property","SettingLayer","type","onLoad","onDisable","onDestroy","start","isMusic","getMusiceVolume","isEffect","getEffectVolume","onMusicCheck","console","log","musicToggle","getComponent","isChecked","setMusicVolume","onSoundCheck","setEffectVolume","closeLayer"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;AAAYC,MAAAA,I,OAAAA,I;AAAMC,MAAAA,M,OAAAA,M;;AAClBC,MAAAA,Y,iBAAAA,Y;;AAEAC,MAAAA,W,iBAAAA,W;;;;;;;;;OACH;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBN,U;;8BAGjBO,Y,WADZF,OAAO,CAAC,cAAD,C,UAIHC,QAAQ,CAAC;AAAEE,QAAAA,IAAI,EAAEP;AAAR,OAAD,C,UACRK,QAAQ,CAAC;AAAEE,QAAAA,IAAI,EAAEP;AAAR,OAAD,C,2BALb,MACaM,YADb;AAAA;AAAA,sCAC8C;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAO1CE,QAAAA,MAAM,GAAG;AACL,gBAAMA,MAAN;AACH;;AAIDC,QAAAA,SAAS,GAAG;AACR,gBAAMA,SAAN;AACH;;AAEDC,QAAAA,SAAS,GAAG;AACR,gBAAMA,SAAN;AACH;;AAEDC,QAAAA,KAAK,GAAG;AACJ,cAAIC,OAAO,GAAG;AAAA;AAAA,4CAAaC,eAAb,EAAd;AACA,cAAIC,QAAQ,GAAG;AAAA;AAAA,4CAAaC,eAAb,EAAf,CAFI,CAIJ;AACA;AACA;AACH;;AAEDC,QAAAA,YAAY,GAAG;AACXC,UAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4B,KAAKC,WAAL,CAAiBC,YAAjB,CAA8BnB,MAA9B,EAAsCoB,SAAlE,EADW,CAEX;AACA;AACA;AACA;AACA;AACA;;AACA;AAAA;AAAA,4CAAaC,cAAb,CAA4B,KAAKH,WAAL,CAAiBC,YAAjB,CAA8BnB,MAA9B,EAAsCoB,SAAtC,GAAkD,CAAlD,GAAsD,CAAlF,EARW,CASX;AACH;;AAEDE,QAAAA,YAAY,GAAG;AACX;AAAA;AAAA,4CAAaC,eAAb,CAA6B,KAAKL,WAAL,CAAiBC,YAAjB,CAA8BnB,MAA9B,EAAsCoB,SAAtC,GAAkD,CAAlD,GAAsD,CAAnF;AAEH;;AAEDI,QAAAA,UAAU,GAAG;AACT,gBAAMA,UAAN;AACH;;AAjDyC,O;;;;;iBAGI,I;;;;;;;iBACC,I","sourcesContent":["import { _decorator, Node, Toggle } from 'cc';\r\nimport { audioManager } from '../../manager/audioManager';\r\n\r\nimport { BaseUILayer } from './BaseUILayer';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('SettingLayer')\r\nexport class SettingLayer extends BaseUILayer {\r\n\r\n\r\n    @property({ type: Node }) musicToggle: Node = null;\r\n    @property({ type: Node }) effectToggle: Node = null;\r\n\r\n\r\n    onLoad() {\r\n        super.onLoad()\r\n    }\r\n\r\n   \r\n\r\n    onDisable() {\r\n        super.onDisable();\r\n    }\r\n\r\n    onDestroy() {\r\n        super.onDestroy();\r\n    }\r\n\r\n    start() {\r\n        let isMusic = audioManager.getMusiceVolume()\r\n        let isEffect = audioManager.getEffectVolume()\r\n\r\n        // this.musicToggle.getComponent(Toggle).isChecked = isMusic > 0\r\n        //  this.effectToggle.getComponent(Toggle).isChecked = isEffect > 0\r\n        //this.musicToggle.getChildByName(\"Toggle1\").getComponent(Toggle).isChecked == isMusic > 0\r\n    }\r\n\r\n    onMusicCheck() {\r\n        console.log(\"onMusicCheck\", this.musicToggle.getComponent(Toggle).isChecked)\r\n        // let isMusic = audioManager.getMusiceVolume()\r\n        // if (isMusic <= 0) {\r\n        //     isMusic = 1\r\n        // } else {\r\n        //     isMusic = 0\r\n        // }\r\n        audioManager.setMusicVolume(this.musicToggle.getComponent(Toggle).isChecked ? 1 : 0)\r\n        //  this.musicToggle.getComponent(Toggle).isChecked = isMusic > 0\r\n    }\r\n\r\n    onSoundCheck() {\r\n        audioManager.setEffectVolume(this.musicToggle.getComponent(Toggle).isChecked ? 1 : 0)\r\n  \r\n    }\r\n\r\n    closeLayer() {\r\n        super.closeLayer()\r\n    }\r\n\r\n}\r\n\r\n"]}