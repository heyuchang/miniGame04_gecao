{"version":3,"sources":["file:///G:/cocos/%E6%9C%AB%E6%97%A5%E7%89%B9%E5%B7%A5%E9%98%9F/assets/scripts/tyqSDK/network/CronCtr.ts"],"names":["Component","director","_decorator","tyqSDK","GLoginState","GNetCmd","GNetConst","Http","ServerCtr","TimeCtr","WmSocket","ccclass","property","CronCtr","msgArr","msgArrIdx","isPutEnable","testTimeDelta","getInstance","_instance","init","on","Heartbeat","toString","onHeartbeat","SaveUserRecord","respSaveUserRecord","schedule","reqHeartBeat","startHeartbeat","httpPost","getUrl","httpUrl","Http_isAlive","res","console","log","GetInstance","UpdateServerTime","serverTime","connect","loginState","loginFail","data","status","ResSuccess","loginWithAccount","noYet","ReInit","UpdateServerTimeByHeartbeat","time","lastHeartbeatTime","ServerTime","isConnected","emit","wxLoginBegin","heartbeatCheck","ResFail","error","cheatLevel","hasOwnProperty","sendMultiMsg","i","token","length","jsonData","send","saveDataToCloud","key","val","Date","getTime","dataVersion","String","uploadAllRecord","SaveUserRecordAll","JSON","stringify","warn"],"mappings":"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","sourcesContent":["\r\nimport { Component, director, _decorator } from 'cc';\r\nimport { tyqSDK } from '../tyqSDK';\r\nimport { GLoginState, GNetCmd, GNetConst } from './conf';\r\nimport Http from './http';\r\nimport ServerCtr from './ServerCtr';\r\nimport TimeCtr from './TimeCtr';\r\nimport { WmSocket } from './wmsocket';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('CronCtr')\r\nexport default class CronCtr extends Component {\r\n\r\n    private static _instance: CronCtr;\r\n\r\n    public static getInstance(): CronCtr {\r\n        if (!this._instance) {\r\n            this._instance = new CronCtr();\r\n        }\r\n        return this._instance;\r\n    }\r\n\r\n    msgArr = [];\r\n    msgArrIdx = 0;\r\n\r\n    isPutEnable: boolean = false;\r\n    testTimeDelta: number = 0;\r\n\r\n    //保存队列，第一条和下一条按时间差150毫秒内的记录，统一一次性发送，发送成功后再发送下一批次\r\n    //断线重连\r\n    //本地存储登录返回的uid，区号\r\n    //数据存储，key_uid_区号_time,按照time进行排序\r\n    //服务端记录一个时间\r\n    //切号\r\n    // saverQueue:object[] = []; //{data:协议内容,time:TimeCtr.GetInstance().ServerTime}\r\n    //\r\n    // set SaverQueue(data){\r\n    //     this.saverQueue.push({data:data, time:TimeCtr.GetInstance().ServerTime})\r\n    // }\r\n\r\n    init() {\r\n        director.on(GNetCmd.Heartbeat.toString(), this.onHeartbeat)\r\n        director.on(GNetCmd.SaveUserRecord.toString(), this.respSaveUserRecord, this)\r\n        this.schedule(this.reqHeartBeat, 3);\r\n        this.startHeartbeat()\r\n    }\r\n\r\n    startHeartbeat() {\r\n        ///重连定时器\r\n        WmSocket.getInstance();\r\n        Http.getInstance().httpPost(tyqSDK.getUrl().httpUrl + GNetConst.Http_isAlive, {}, (res: any) => {\r\n            console.log(\"server response :\", res)\r\n            if (res != -1) {\r\n                TimeCtr.GetInstance().UpdateServerTime(res.serverTime);\r\n                WmSocket.getInstance().connect();\r\n            }\r\n        }, () => {\r\n            ServerCtr.GetInstance().loginState = GLoginState.loginFail;\r\n        });\r\n\r\n        // ()=>{\r\n        //     if(WmSocket.getInstance().isConnected()==false){\r\n        //         Http.getInstance().httpPost(gl.server_http_url, {}, (res)=>{\r\n        //             // cc.log(\"接受到的请求内容是\", res)\r\n        //             if(res != -1){\r\n        //                 TimeCtr.GetInstance().UpdateServerTime(res.serverTime);\r\n        //                 EventMgr.getInstance().event(\"ws_reconnect\");\r\n        //             }\r\n        //         });\r\n        //     }else{\r\n        //         if(GlParam.isEnterGame){\r\n        //             this.heartbeatCheck()\r\n        //         }\r\n        //     }\r\n        // }\r\n    }\r\n\r\n\r\n    onHeartbeat(data: any) {\r\n        // console.log(\"heartbeat \", data)\r\n        if (data.status != GNetConst.ResSuccess) {\r\n            // GD.GameState = GGameState.stop\r\n            // mygame.pause()\r\n            // TimeCtr.GetInstance().ServerTime = data.time\r\n            //被抢登了\r\n            if (ServerCtr.GetInstance().loginState == GLoginState.loginWithAccount) {\r\n                ServerCtr.GetInstance().loginState = GLoginState.noYet;\r\n            }\r\n            TimeCtr.GetInstance().ReInit();\r\n            // uiManager.instance.showDialog(Const.Dialogs.kick_prompt)\r\n            // App.event(GameEvent.ShowFlyTips,{text:`<color=red>账号已在其他设备登录</c>`})//${i18n.t('txt.login_msg_out')}\r\n            CronCtr.getInstance().isPutEnable = false;\r\n\r\n            // let errMsg = `账号已在其他设备登录`;\r\n            // let cheatLevel = localStorage.getItem(\"cheatLevel\")\r\n            // if(cheatLevel!=\"\"){\r\n            // \tcheatLevel = parseInt(cheatLevel)\r\n            // \tif(cheatLevel==1){\r\n            // \t\terrMsg = `<color=${Res.RedColor}>服务端检测到你正在使用非法外挂，如再发现直接封号</c>`;\r\n            // \t}else if(cheatLevel==2){\r\n            // \t\terrMsg = `<color=${Res.RedColor}>该区账号涉嫌作弊已被封禁，如再开挂所有区服全部封禁 </c>`;\r\n            // \t}else if(cheatLevel>=3){\r\n            // \t\terrMsg = `<color=${Res.RedColor}>该账号已封禁</c>`;\r\n            // \t}\r\n            // \tcc.sys.localStorage.removeItem(\"cheatLevel\")\r\n            // }\r\n            // cc.game.restart();\r\n        } else {\r\n            TimeCtr.GetInstance().UpdateServerTimeByHeartbeat(data.time * 1000);\r\n            WmSocket.getInstance().lastHeartbeatTime = TimeCtr.GetInstance().ServerTime\r\n        }\r\n        // else{\r\n        // \t//检查版本号是否和服务端匹配\r\n        // \tif (data.version.includes('@'+this.center.Version)==false){\r\n        // \t\tthis.ui.CloseAllPanel();\r\n        // \t\tthis.ui.ShowPanel('LoadPanel');\r\n        // \t\t//弹窗提示当前版本号不对\r\n        // \t\tApp.event(GameEvent.ShowFlyTips,{text:`<color=red>发现新版本，请先更新!</c>`})//${i18n.t('txt.login_msg_version')}\r\n        // \t\tGlParam.isEnterGame = false;\r\n        // \t}\r\n        // }\r\n    }\r\n\r\n    reqHeartBeat() {\r\n        // console.log(\"-----心跳-----\", WmSocket.getInstance().isConnected(), ServerCtr.GetInstance().loginState);\r\n\r\n        if (WmSocket.getInstance().isConnected() == false) {\r\n            // uiManager.instance.showDialog(Const.Dialogs.net_prompt, )\r\n            // Notifications.emit(GDef.wdEvent.showTip, {msg:\"网络连接异常\"})\r\n            Http.getInstance().httpPost(tyqSDK.getUrl().httpUrl + GNetConst.Http_isAlive, {}, (res: any) => {\r\n                // cc.log(\"接受到的请求内容是\", res)\r\n                if (res != -1) {\r\n                    TimeCtr.GetInstance().UpdateServerTime(res.serverTime);\r\n                    director.emit(\"ws_reconnect\");\r\n                }\r\n            }, () => {\r\n                ServerCtr.GetInstance().loginState = GLoginState.loginFail;\r\n            });\r\n        } else {\r\n            if (ServerCtr.GetInstance().loginState == GLoginState.loginFail) {\r\n                //重连后登录\r\n                ServerCtr.GetInstance().wxLoginBegin();\r\n            } else {\r\n                this.heartbeatCheck()\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    respSaveUserRecord(data: any) {\r\n\r\n        if (data.status == GNetConst.ResFail) {\r\n            console.error(\"发现作弊1----\", data, data.cheatLevel, data.hasOwnProperty(\"cheatLevel\"))\r\n            // let cheatLevel = data.cheatLevel\r\n            // if(cheatLevel!==undefined){\r\n            //     // cc.log(\"cheatLevel2--------!!!!---\", cheatLevel)\r\n            //     localStorage.setItem(\"cheatLevel\", cheatLevel+\"\")\r\n            //     //直接发送一个心跳利用心跳到登录页面\r\n            //     let data = {\r\n            //         \"cmd\": GNetCmd.Heartbeat,\r\n            //         \"lang\": \"zh\",\r\n            //         \"token\": ServerCtr.GetInstance().token,//GameStorage.getString(\"loginToken\"),\r\n            //     }\r\n            //     WmSocket.getInstance().send({\"data\":data});\r\n            // }\r\n            // uiManager.instance.showDialog(Const.Dialogs.kick_prompt)\r\n            // GameStorage.setString(\"cheatLevel\", data.cheatLevel)\r\n        }\r\n        // if(data[\"isEnd\"]==false){\r\n        //     this.sendMultiMsg(data[\"idx\"]+1)\r\n        // }\r\n    }\r\n\r\n    // cloudSave(obj){\r\n    //     // 进入游戏每隔5分钟存储一次\r\n    //     obj.schedule(()=>{\r\n    //         if(!GlParam.isEnterGame){\r\n    //             return;\r\n    //         }\r\n    //         this.cloudSaveManual()\r\n    //         // if(WmSocket.getInstance().isConnected()){\r\n    //         //     let data = {\r\n    //         //         \"cmd\": GNetCmd.SaveUserRecord,\r\n    //         //         \"lang\": \"zh\",\r\n    //         //         \"token\": GameStorage.getString(\"loginToken\"),\r\n    //         //         // \"jsonData\": JSON.stringify(GameStorage.getAll()),\r\n    //         //         \"jsonData\": JSON.stringify(GameStorage.getAll()),\r\n    //         //     }\r\n    //         //     cc.log(\"长度测试\",JSON.stringify(GameStorage.getAll()).length)\r\n    //         //     WmSocket.getInstance().send({\"data\":data});\r\n    //         // }\r\n\r\n    //     }, 300);\r\n    // }\r\n\r\n    sendMultiMsg(i: number) {\r\n        // for(let i=0; i<strArr.length; i++){\r\n        //\r\n        // }\r\n\r\n        let data = {\r\n            // \"cmd\": GNetCmd.SaveUserRecord,\r\n            \"cmd\": GNetCmd.SaveUserRecord,\r\n            \"lang\": \"zh\",\r\n            \"type\": \"slice\",\r\n            \"token\": ServerCtr.GetInstance().token,//GameStorage.getString(\"loginToken\"),\r\n            // \"jsonData\":JSON.stringify(GameStorage.getAll()),\r\n            \"jsonData\": this.msgArr[i],\r\n            \"isEnd\": i == this.msgArr.length - 1,\r\n            \"isStart\": i == 0,\r\n            \"idx\": i\r\n        }\r\n        if (!data.jsonData || data.jsonData == \"\" || data.jsonData == \"{}\") {\r\n            return\r\n        }\r\n        // cc.log(\"分段存储\", data)\r\n        WmSocket.getInstance().send({ \"data\": data });\r\n    }\r\n\r\n    //保存数据到云端\r\n    saveDataToCloud(key: string, val: any) {\r\n        if (ServerCtr.GetInstance().loginState != GLoginState.loginWithAccount) {\r\n            return;\r\n        }\r\n        // cc.log(\"上传数据时间标记---------\", new Date().getTime(),  new Date().getTime()-this.testTimeDelta )\r\n        this.testTimeDelta = new Date().getTime()\r\n        if (WmSocket.getInstance().isConnected()) {\r\n            let data = {\r\n                \"cmd\": GNetCmd.SaveUserRecord,\r\n                \"lang\": \"zh\",\r\n                \"type\": \"single\",\r\n                \"token\": ServerCtr.GetInstance().token,//GameStorage.getString(\"loginToken\"),\r\n                \"version\": ServerCtr.GetInstance().dataVersion,\r\n                // \"jsonData\":JSON.stringify(GameStorage.getAll()),\r\n                // \"jsonData\":JSON.stringify(GameStorage.getAll(isFirst)),\r\n                \"key\": key,\r\n                \"val\": String(val),\r\n                \"dml\": \"add upd\"\r\n            }\r\n            // cc.log(\"长度测试\", JSON.stringify(GameStorage.getAll(isFirst)).length)\r\n            WmSocket.getInstance().send({ \"data\": data });\r\n        }\r\n    }\r\n\r\n    uploadAllRecord(jsonData: any) {\r\n        if (ServerCtr.GetInstance().loginState != GLoginState.loginWithAccount) {\r\n            return;\r\n        }\r\n        let data = {\r\n            // \"cmd\": GNetCmd.SaveUserRecord,\r\n            \"cmd\": GNetCmd.SaveUserRecordAll,\r\n            \"lang\": \"zh\",\r\n            \"type\": \"single\",\r\n            \"token\": ServerCtr.GetInstance().token,//GameStorage.getString(\"loginToken\"),\r\n            // \"jsonData\":JSON.stringify(GameStorage.getAll()),\r\n            \"version\": ServerCtr.GetInstance().dataVersion,\r\n            \"allData\": JSON.stringify(jsonData),\r\n        }\r\n        // if (!data.jsonData || data.jsonData == \"\" || data.jsonData == \"{}\") {\r\n        //     return\r\n        // }\r\n        // cc.log(\"长度测试\", JSON.stringify(GameStorage.getAll(isFirst)).length)\r\n        console.warn(\"发送数据到云端---\", data)\r\n        WmSocket.getInstance().send({ \"data\": data });\r\n    }\r\n\r\n    // UploadEmptyRecord(){\r\n    //     if (!ServerCtr.GetInstance().isLogin) {\r\n    //         return;\r\n    //     }\r\n    //     let data = {\r\n    //         // \"cmd\": GNetCmd.SaveUserRecord,\r\n    //         \"cmd\": GNetCmd.SaveUserRecordAll,\r\n    //         \"lang\": \"zh\",\r\n    //         \"type\": \"single\",\r\n    //         \"token\": ServerCtr.GetInstance().token,//GameStorage.getString(\"loginToken\"),\r\n    //         // \"jsonData\":JSON.stringify(GameStorage.getAll()),\r\n    //         \"allData\":JSON.stringify({}),\r\n    //     }\r\n    //     // if (!data.jsonData || data.jsonData == \"\" || data.jsonData == \"{}\") {\r\n    //     //     return\r\n    //     // }\r\n    //     // cc.log(\"长度测试\", JSON.stringify(GameStorage.getAll(isFirst)).length)\r\n    //     WmSocket.getInstance().send({\"data\":data});\r\n    // }\r\n\r\n\r\n    // cloudDeleteManual(key:string){\r\n    //     // if (!this.isPutEnable) {\r\n    //     //     return;\r\n    //     // }\r\n    //     if (!ServerCtr.GetInstance().isLogin) {\r\n    //         return;\r\n    //     }\r\n    //     if(WmSocket.getInstance().isConnected()){\r\n    //         let data = {\r\n    //             // \"cmd\": GNetCmd.SaveUserRecord,\r\n    //             \"cmd\": GNetCmd.SaveUserRecord,\r\n    //             \"lang\": \"zh\",\r\n    //             \"type\": \"single\",\r\n    //             \"token\": ServerCtr.GetInstance().token,//GameStorage.getString(\"loginToken\"),\r\n    //             \"key\":key,\r\n    //             \"val\":\"\",\r\n    //             \"dml\":\"del\"\r\n    //         }\r\n    //         Public.warn(\"del--------------\")\r\n    //         WmSocket.getInstance().send({\"data\":data});\r\n    //     }\r\n    // }\r\n\r\n    heartbeatCheck() {\r\n        let data = {\r\n            \"cmd\": GNetCmd.Heartbeat,\r\n            \"lang\": \"zh\",\r\n            \"token\": ServerCtr.GetInstance().token,//GameStorage.getString(\"loginToken\"),\r\n        }\r\n        WmSocket.getInstance().send({ \"data\": data });\r\n    }\r\n\r\n}\r\n"]}